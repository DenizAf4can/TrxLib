local TrxLib = {}
TrxLib.__index = TrxLib
TrxLib.CategoryMethods = {}
TrxLib.SubTabMethods = {}

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TextService = game:GetService("TextService")
local HttpService = game:GetService("HttpService") -- Added for Notification GUID

local function CreateInstance(className, properties)
    local inst = Instance.new(className)
    for p, v in pairs(properties or {}) do
        if v ~= nil then
            local success, err =
                pcall(
                function()
                    inst[p] = v
                end
            )
            if not success then
            -- warn("TrxLib CreateInstance Error for " .. className .. "." .. p .. ": " .. tostring(err))
            end
        end
    end
    return inst
end

local function MergeTables(base, custom)
    local result = {}
    for k, v in pairs(base) do
        result[k] = v
    end
    if custom then
        for k, v in pairs(custom) do
            result[k] = v
        end
    end
    return result
end

local function MakeDraggable(guiObjectToDragBy, objectToMove)
    local isDragging = false
    local dragInputObject = nil
    local clickOffset = Vector2.zero
    local dragConnection

    guiObjectToDragBy.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                if UserInputService:GetFocusedTextBox() then
                    return
                end

                if isDragging and input.UserInputType == Enum.UserInputType.Touch and input ~= dragInputObject then
                    return
                end

                isDragging = true
                dragInputObject = input

                local mouseLocation = UserInputService:GetMouseLocation()
                if input.UserInputType == Enum.UserInputType.Touch then
                    mouseLocation = Vector2.new(input.Position.X, input.Position.Y)
                end

                local objectAbsolutePosition = objectToMove.AbsolutePosition

                clickOffset = mouseLocation - objectAbsolutePosition

                if dragConnection then
                    dragConnection:Disconnect()
                    dragConnection = nil
                end

                dragConnection =
                    RunService.RenderStepped:Connect(
                    function()
                        if not isDragging or not objectToMove or not objectToMove.Parent then
                            if dragConnection then
                                dragConnection:Disconnect()
                                dragConnection = nil
                            end
                            isDragging = false
                            return
                        end

                        local currentMouseLocation = UserInputService:GetMouseLocation()
                        if dragInputObject.UserInputType == Enum.UserInputType.Touch then
                            local touches = UserInputService:GetTouchPositions()
                            local foundTouch = false
                            for _, touch in ipairs(touches) do
                                if touch.KeyCode == dragInputObject.KeyCode then
                                    currentMouseLocation = Vector2.new(touch.Position.X, touch.Position.Y)
                                    foundTouch = true
                                    break
                                end
                            end
                            if not foundTouch then
                                isDragging = false
                                return
                            end
                        end

                        if not currentMouseLocation then
                            isDragging = false
                            return
                        end

                        local targetScreenX = currentMouseLocation.X - clickOffset.X
                        local targetScreenY = currentMouseLocation.Y - clickOffset.Y

                        objectToMove.Position = UDim2.fromOffset(targetScreenX, targetScreenY)
                    end
                )
            end
        end
    )

    local function stopDragging(input)
        if isDragging and dragInputObject then
            if input.UserInputType == dragInputObject.UserInputType then
                if
                    (input.UserInputType == Enum.UserInputType.MouseButton1) or
                        (input.UserInputType == Enum.UserInputType.Touch and input.KeyCode == dragInputObject.KeyCode)
                 then
                    isDragging = false
                    dragInputObject = nil
                    if dragConnection then
                        dragConnection:Disconnect()
                        dragConnection = nil
                    end
                end
            end
        end
    end

    guiObjectToDragBy.InputEnded:Connect(stopDragging)
    UserInputService.InputEnded:Connect(stopDragging)
end

local function AnimateElementVisibility(element, fadeIn, duration, onComplete)
    duration = duration or 0.3
    local tweensCreated = {}
    local currentBgTransparency =
        (element:IsA("Frame") or element:IsA("ImageLabel") or element:IsA("ImageButton") or element:IsA("TextButton") or
        element:IsA("TextBox")) and
        element.BackgroundTransparency or
        nil
    local currentTextTransparency =
        (element:IsA("TextLabel") or element:IsA("TextButton") or element:IsA("TextBox")) and element.TextTransparency or
        nil
    local currentImageTransparency =
        (element:IsA("ImageLabel") or element:IsA("ImageButton")) and element.ImageTransparency or nil

    if fadeIn then
        if element:GetAttribute("OriginalBackgroundTransparency") == nil and currentBgTransparency ~= nil then
            element:SetAttribute("OriginalBackgroundTransparency", currentBgTransparency)
        end
        if element:GetAttribute("OriginalTextTransparency") == nil and currentTextTransparency ~= nil then
            element:SetAttribute("OriginalTextTransparency", currentTextTransparency)
        end
        if element:GetAttribute("OriginalImageTransparency") == nil and currentImageTransparency ~= nil then
            element:SetAttribute("OriginalImageTransparency", currentImageTransparency)
        end
    end

    local finalBgTransparency = fadeIn and (element:GetAttribute("OriginalBackgroundTransparency") or 0) or 1
    local finalTextTransparency = fadeIn and (element:GetAttribute("OriginalTextTransparency") or 0) or 1
    local finalImageTransparency = fadeIn and (element:GetAttribute("OriginalImageTransparency") or 0) or 1

    local function animateProperty(obj, propName, endVal)
        local startVal = fadeIn and 1 or obj[propName]
        if fadeIn then
            obj[propName] = 1
        end
        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local goal = {[propName] = endVal}
        local tween = TweenService:Create(obj, tweenInfo, goal)
        tween:Play()
        table.insert(tweensCreated, tween)
    end

    if fadeIn then
        element.Visible = true
    end

    if currentBgTransparency ~= nil then
        animateProperty(element, "BackgroundTransparency", finalBgTransparency)
    end
    if currentTextTransparency ~= nil then
        animateProperty(element, "TextTransparency", finalTextTransparency)
    end
    if currentImageTransparency ~= nil then
        animateProperty(element, "ImageTransparency", finalImageTransparency)
    end

    if #tweensCreated > 0 then
        local completedCount = 0
        local allTweensCompleted = false
        local function checkCompletion()
            if not allTweensCompleted and completedCount == #tweensCreated then
                allTweensCompleted = true
                if not fadeIn and element.Parent then
                    element.Visible = false
                end
                if onComplete then
                    onComplete()
                end
            end
        end
        for _, tween in ipairs(tweensCreated) do
            tween.Completed:Connect(
                function()
                    completedCount = completedCount + 1
                    checkCompletion()
                end
            )
        end
        if #tweensCreated == 0 then
            if not fadeIn then
                element.Visible = false
            end
            if onComplete then
                task.delay(duration, onComplete)
            end
        end
    else
        if not fadeIn then
            element.Visible = false
        end
        if onComplete then
            task.delay(duration, onComplete)
        else
            task.delay(
                duration,
                function()
                    if not fadeIn and element.Parent then
                        element.Visible = false
                    end
                end
            )
        end
    end
end

local Themes = {
    default = {
        Name = "Default Dark",
        WindowBackground = Color3.fromRGB(18, 18, 22),
        TopBarBackground = Color3.fromRGB(22, 22, 26),
        TopBarText = Color3.fromRGB(220, 220, 220),
        ScriptNamePillBackground = Color3.fromRGB(50, 50, 60),
        ScriptNamePillText = Color3.fromRGB(180, 180, 200),
        VersionText = Color3.fromRGB(130, 130, 140),
        LeftNavBackground = Color3.fromRGB(28, 28, 34),
        CategoryHeaderBackground = Color3.fromRGB(28, 28, 34),
        CategoryHeaderText = Color3.fromRGB(190, 190, 190),
        CategoryArrowColor = Color3.fromRGB(150, 150, 150),
        SubTabBackground = Color3.fromRGB(28, 28, 34),
        SubTabText = Color3.fromRGB(160, 160, 170),
        SubTabHoverBackground = Color3.fromRGB(40, 40, 48),
        SubTabActiveBackground = Color3.fromRGB(0, 122, 204),
        SubTabActiveText = Color3.fromRGB(250, 250, 250),
        SubTabActiveIndicatorColor = Color3.fromRGB(250, 250, 250),
        UserInfoBackground = Color3.fromRGB(24, 24, 28),
        UserNameText = Color3.fromRGB(210, 210, 210),
        UserTagText = Color3.fromRGB(130, 130, 130),
        ContentBackground = Color3.fromRGB(32, 32, 38),
        ContentTransparency = 0,
        SectionBoxBackground = Color3.fromRGB(24, 24, 28),
        SectionHeaderBackground = Color3.fromRGB(24, 24, 28),
        SectionHeaderTextColor = Color3.fromRGB(200, 200, 210),
        SectionLineColor = Color3.fromRGB(40, 42, 45),
        LabelText = Color3.fromRGB(210, 210, 210),
        DescriptionText = Color3.fromRGB(140, 140, 150),
        ErrorTextColor = Color3.fromRGB(255, 80, 80),
        ButtonBackground = Color3.fromRGB(50, 55, 60),
        ButtonText = Color3.fromRGB(210, 210, 210),
        ButtonHoverBackground = Color3.fromRGB(65, 70, 80),
        ToggleCheckboxBackground = Color3.fromRGB(50, 55, 60),
        ToggleCheckboxBorderColor = Color3.fromRGB(70, 70, 70),
        ToggleCheckboxFilledColor = Color3.fromRGB(0, 122, 204),
        ToggleLabelText = Color3.fromRGB(210, 210, 210),
        InputBackground = Color3.fromRGB(20, 20, 24),
        InputText = Color3.fromRGB(200, 200, 200),
        InputPlaceholder = Color3.fromRGB(120, 120, 120),
        InputBorderColor = Color3.fromRGB(50, 50, 50),
        InputErrorBorderColor = Color3.fromRGB(200, 50, 50),
        SliderTrack = Color3.fromRGB(50, 55, 60),
        SliderProgress = Color3.fromRGB(0, 122, 204),
        SliderThumb = Color3.fromRGB(180, 180, 180),
        SliderInputBackground = Color3.fromRGB(20, 20, 24),
        DropdownButton = Color3.fromRGB(50, 55, 60),
        DropdownBackground = Color3.fromRGB(35, 37, 40),
        DropdownItemHover = Color3.fromRGB(65, 70, 80),
        DropdownMultiItemSelectedBg = Color3.fromRGB(60, 75, 95),
        DropdownBorderColor = Color3.fromRGB(50, 50, 50),
        SeparatorLineColor = Color3.fromRGB(45, 45, 50),
        WindowBorderColor = Color3.fromRGB(10, 10, 10),
        CloseButtonText = Color3.fromRGB(180, 180, 180),
        NotificationSuccessBackground = Color3.fromRGB(70, 180, 100),
        NotificationSuccessText = Color3.fromRGB(255, 255, 255),
        NotificationErrorBackground = Color3.fromRGB(220, 70, 70),
        NotificationErrorText = Color3.fromRGB(255, 255, 255),
        NotificationWarningBackground = Color3.fromRGB(230, 180, 80),
        NotificationWarningText = Color3.fromRGB(40, 30, 10),
        NotificationInfoBackground = Color3.fromRGB(80, 150, 220),
        NotificationInfoText = Color3.fromRGB(255, 255, 255),
        NotificationDefaultBackground = Color3.fromRGB(60, 60, 70),
        NotificationDefaultText = Color3.fromRGB(230, 230, 230),
        NotificationBackgroundTransparency = 0.15, -- Added
        MinimizeButtonText = Color3.fromRGB(180, 180, 180),
        MiniLogoDefault = "rbxassetid://1818497369",
        MiniLogoColor = Color3.fromRGB(0, 122, 204),
        LoadingTextColor = Color3.fromRGB(210, 210, 210),
        TooltipBackground = Color3.fromRGB(15, 15, 18),
        TooltipText = Color3.fromRGB(200, 200, 200),
        TooltipBackgroundTransparency = 0.05,
        TooltipBorderColor = Color3.fromRGB(60, 60, 65),
        ScrollBarColor = Color3.fromRGB(80, 80, 80),
        TopBarHeight = 40,
        LeftNavWidth = 220,
        UserInfoHeight = 55,
        CategoryHeaderHeight = 30,
        SubTabHeight = 32,
        SubTabIndicatorWidth = 3,
        ControlHeight = 28,
        CheckboxSize = 20,
        ControlSpacing = 10,
        Padding = 12,
        WindowBorderSize = 0,
        CornerRadius = 4,
        SubTabCornerRadius = 4,
        ButtonCornerRadius = 3,
        InputCornerRadius = 3,
        DropdownItemCornerRadius = 3,
        SectionCornerRadius = 4,
        ScriptNamePillVCorners = 8,
        ScriptNamePillHPadding = 10,
        ControlRowMinHeight = 40
    }
}
Themes.mintyfresh =
    MergeTables(
    Themes.default,
    {
        Name = "Minty Fresh",
        WindowBackground = Color3.fromRGB(220, 240, 230),
        TopBarBackground = Color3.fromRGB(180, 220, 200),
        TopBarText = Color3.fromRGB(40, 60, 50),
        ScriptNamePillBackground = Color3.fromRGB(60, 180, 150),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(70, 100, 90),
        LeftNavBackground = Color3.fromRGB(200, 230, 215),
        CategoryHeaderBackground = Color3.fromRGB(200, 230, 215),
        CategoryHeaderText = Color3.fromRGB(50, 80, 70),
        CategoryArrowColor = Color3.fromRGB(70, 100, 90),
        SubTabBackground = Color3.fromRGB(200, 230, 215),
        SubTabText = Color3.fromRGB(60, 90, 80),
        SubTabHoverBackground = Color3.fromRGB(170, 210, 190),
        SubTabActiveBackground = Color3.fromRGB(60, 180, 150),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(40, 60, 50),
        UserInfoBackground = Color3.fromRGB(210, 235, 225),
        UserNameText = Color3.fromRGB(40, 70, 60),
        UserTagText = Color3.fromRGB(80, 110, 100),
        ContentBackground = Color3.fromRGB(235, 245, 240),
        SectionBoxBackground = Color3.fromRGB(210, 235, 225),
        SectionHeaderBackground = Color3.fromRGB(205, 230, 220),
        SectionHeaderTextColor = Color3.fromRGB(50, 80, 70),
        SectionLineColor = Color3.fromRGB(190, 215, 205),
        LabelText = Color3.fromRGB(45, 75, 65),
        DescriptionText = Color3.fromRGB(80, 110, 100),
        ErrorTextColor = Color3.fromRGB(220, 90, 90),
        ButtonBackground = Color3.fromRGB(130, 190, 170),
        ButtonText = Color3.fromRGB(255, 255, 255),
        ButtonHoverBackground = Color3.fromRGB(110, 170, 150),
        ToggleCheckboxBackground = Color3.fromRGB(200, 225, 215),
        ToggleCheckboxBorderColor = Color3.fromRGB(170, 200, 190),
        ToggleCheckboxFilledColor = Color3.fromRGB(60, 180, 150),
        ToggleLabelText = Color3.fromRGB(45, 75, 65),
        InputBackground = Color3.fromRGB(245, 255, 250),
        InputText = Color3.fromRGB(40, 60, 50),
        InputPlaceholder = Color3.fromRGB(130, 160, 150),
        InputBorderColor = Color3.fromRGB(180, 220, 200),
        InputErrorBorderColor = Color3.fromRGB(220, 90, 90),
        SliderTrack = Color3.fromRGB(190, 220, 210),
        SliderProgress = Color3.fromRGB(60, 180, 150),
        SliderThumb = Color3.fromRGB(70, 100, 90),
        SliderInputBackground = Color3.fromRGB(240, 250, 245),
        DropdownButton = Color3.fromRGB(180, 220, 200),
        DropdownBackground = Color3.fromRGB(220, 240, 230),
        DropdownItemHover = Color3.fromRGB(160, 200, 180),
        DropdownMultiItemSelectedBg = Color3.fromRGB(100, 190, 160),
        DropdownBorderColor = Color3.fromRGB(170, 200, 190),
        SeparatorLineColor = Color3.fromRGB(200, 220, 210),
        CloseButtonText = Color3.fromRGB(70, 100, 90),
        MinimizeButtonText = Color3.fromRGB(70, 100, 90),
        MiniLogoColor = Color3.fromRGB(60, 180, 150),
        LoadingTextColor = Color3.fromRGB(50, 80, 70),
        TooltipBackground = Color3.fromRGB(240, 255, 250),
        TooltipText = Color3.fromRGB(40, 60, 50),
        TooltipBorderColor = Color3.fromRGB(170, 200, 190),
        ScrollBarColor = Color3.fromRGB(150, 180, 170)
    }
)
Themes.oceanbreeze =
    MergeTables(
    Themes.default,
    {
        Name = "Ocean Breeze",
        WindowBackground = Color3.fromRGB(220, 235, 240),
        TopBarBackground = Color3.fromRGB(170, 205, 215),
        TopBarText = Color3.fromRGB(30, 50, 60),
        ScriptNamePillBackground = Color3.fromRGB(50, 160, 190),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(60, 90, 100),
        LeftNavBackground = Color3.fromRGB(190, 220, 225),
        CategoryHeaderBackground = Color3.fromRGB(190, 220, 225),
        CategoryHeaderText = Color3.fromRGB(40, 70, 80),
        CategoryArrowColor = Color3.fromRGB(60, 90, 100),
        SubTabBackground = Color3.fromRGB(190, 220, 225),
        SubTabText = Color3.fromRGB(50, 80, 90),
        SubTabHoverBackground = Color3.fromRGB(160, 190, 200),
        SubTabActiveBackground = Color3.fromRGB(50, 160, 190),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(255, 255, 255),
        UserInfoBackground = Color3.fromRGB(200, 225, 230),
        UserNameText = Color3.fromRGB(35, 60, 70),
        UserTagText = Color3.fromRGB(70, 100, 110),
        ContentBackground = Color3.fromRGB(230, 240, 245),
        SectionBoxBackground = Color3.fromRGB(205, 225, 230),
        SectionHeaderBackground = Color3.fromRGB(195, 220, 225),
        SectionHeaderTextColor = Color3.fromRGB(40, 70, 80),
        SectionLineColor = Color3.fromRGB(180, 210, 215),
        LabelText = Color3.fromRGB(35, 65, 75),
        DescriptionText = Color3.fromRGB(70, 100, 110),
        ErrorTextColor = Color3.fromRGB(200, 70, 70),
        ButtonBackground = Color3.fromRGB(120, 180, 195),
        ButtonText = Color3.fromRGB(255, 255, 255),
        ButtonHoverBackground = Color3.fromRGB(100, 160, 175),
        ToggleCheckboxBackground = Color3.fromRGB(190, 215, 220),
        ToggleCheckboxBorderColor = Color3.fromRGB(150, 180, 190),
        ToggleCheckboxFilledColor = Color3.fromRGB(50, 160, 190),
        ToggleLabelText = Color3.fromRGB(35, 65, 75),
        InputBackground = Color3.fromRGB(240, 250, 255),
        InputText = Color3.fromRGB(30, 50, 60),
        InputPlaceholder = Color3.fromRGB(120, 150, 160),
        InputBorderColor = Color3.fromRGB(170, 205, 215),
        InputErrorBorderColor = Color3.fromRGB(200, 70, 70),
        SliderTrack = Color3.fromRGB(180, 210, 215),
        SliderProgress = Color3.fromRGB(50, 160, 190),
        SliderThumb = Color3.fromRGB(60, 90, 100),
        SliderInputBackground = Color3.fromRGB(235, 245, 250),
        DropdownButton = Color3.fromRGB(170, 205, 215),
        DropdownBackground = Color3.fromRGB(220, 235, 240),
        DropdownItemHover = Color3.fromRGB(150, 190, 200),
        DropdownMultiItemSelectedBg = Color3.fromRGB(90, 170, 200),
        DropdownBorderColor = Color3.fromRGB(150, 180, 190),
        SeparatorLineColor = Color3.fromRGB(190, 210, 220),
        CloseButtonText = Color3.fromRGB(60, 90, 100),
        MinimizeButtonText = Color3.fromRGB(60, 90, 100),
        MiniLogoColor = Color3.fromRGB(50, 160, 190),
        LoadingTextColor = Color3.fromRGB(40, 70, 80),
        TooltipBackground = Color3.fromRGB(235, 245, 250),
        TooltipText = Color3.fromRGB(30, 50, 60),
        TooltipBorderColor = Color3.fromRGB(150, 190, 200),
        ScrollBarColor = Color3.fromRGB(130, 170, 180)
    }
)
Themes.sakuradream =
    MergeTables(
    Themes.default,
    {
        Name = "Sakura Dream",
        WindowBackground = Color3.fromRGB(255, 235, 240),
        TopBarBackground = Color3.fromRGB(245, 200, 210),
        TopBarText = Color3.fromRGB(80, 40, 50),
        ScriptNamePillBackground = Color3.fromRGB(220, 100, 130),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(120, 80, 90),
        LeftNavBackground = Color3.fromRGB(250, 215, 225),
        CategoryHeaderBackground = Color3.fromRGB(250, 215, 225),
        CategoryHeaderText = Color3.fromRGB(100, 60, 70),
        CategoryArrowColor = Color3.fromRGB(120, 80, 90),
        SubTabBackground = Color3.fromRGB(250, 215, 225),
        SubTabText = Color3.fromRGB(120, 80, 90),
        SubTabHoverBackground = Color3.fromRGB(235, 195, 205),
        SubTabActiveBackground = Color3.fromRGB(220, 100, 130),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(255, 255, 255),
        UserInfoBackground = Color3.fromRGB(255, 225, 230),
        UserNameText = Color3.fromRGB(90, 50, 60),
        UserTagText = Color3.fromRGB(130, 90, 100),
        ContentBackground = Color3.fromRGB(255, 240, 245),
        SectionBoxBackground = Color3.fromRGB(255, 225, 235),
        SectionHeaderBackground = Color3.fromRGB(250, 220, 230),
        SectionHeaderTextColor = Color3.fromRGB(100, 60, 70),
        SectionLineColor = Color3.fromRGB(240, 205, 215),
        LabelText = Color3.fromRGB(90, 50, 60),
        DescriptionText = Color3.fromRGB(130, 90, 100),
        ErrorTextColor = Color3.fromRGB(200, 70, 90),
        ButtonBackground = Color3.fromRGB(230, 150, 170),
        ButtonText = Color3.fromRGB(255, 255, 255),
        ButtonHoverBackground = Color3.fromRGB(210, 130, 150),
        ToggleCheckboxBackground = Color3.fromRGB(250, 220, 230),
        ToggleCheckboxBorderColor = Color3.fromRGB(230, 190, 200),
        ToggleCheckboxFilledColor = Color3.fromRGB(220, 100, 130),
        ToggleLabelText = Color3.fromRGB(90, 50, 60),
        InputBackground = Color3.fromRGB(255, 245, 250),
        InputText = Color3.fromRGB(80, 40, 50),
        InputPlaceholder = Color3.fromRGB(150, 120, 130),
        InputBorderColor = Color3.fromRGB(245, 200, 210),
        InputErrorBorderColor = Color3.fromRGB(200, 70, 90),
        SliderTrack = Color3.fromRGB(240, 210, 220),
        SliderProgress = Color3.fromRGB(220, 100, 130),
        SliderThumb = Color3.fromRGB(100, 70, 80),
        SliderInputBackground = Color3.fromRGB(255, 240, 245),
        DropdownButton = Color3.fromRGB(245, 200, 210),
        DropdownBackground = Color3.fromRGB(255, 235, 240),
        DropdownItemHover = Color3.fromRGB(235, 180, 190),
        DropdownMultiItemSelectedBg = Color3.fromRGB(225, 140, 160),
        DropdownBorderColor = Color3.fromRGB(230, 190, 200),
        SeparatorLineColor = Color3.fromRGB(245, 220, 230),
        CloseButtonText = Color3.fromRGB(100, 70, 80),
        MinimizeButtonText = Color3.fromRGB(100, 70, 80),
        MiniLogoColor = Color3.fromRGB(220, 100, 130),
        LoadingTextColor = Color3.fromRGB(90, 50, 60),
        TooltipBackground = Color3.fromRGB(255, 245, 250),
        TooltipText = Color3.fromRGB(80, 40, 50),
        TooltipBorderColor = Color3.fromRGB(235, 180, 190),
        ScrollBarColor = Color3.fromRGB(220, 170, 180)
    }
)
Themes.goldenhour =
    MergeTables(
    Themes.default,
    {
        Name = "Golden Hour",
        WindowBackground = Color3.fromRGB(255, 240, 220),
        TopBarBackground = Color3.fromRGB(255, 200, 150),
        TopBarText = Color3.fromRGB(100, 60, 20),
        ScriptNamePillBackground = Color3.fromRGB(255, 150, 80),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(140, 100, 60),
        LeftNavBackground = Color3.fromRGB(255, 220, 190),
        CategoryHeaderBackground = Color3.fromRGB(255, 220, 190),
        CategoryHeaderText = Color3.fromRGB(120, 80, 40),
        CategoryArrowColor = Color3.fromRGB(140, 100, 60),
        SubTabBackground = Color3.fromRGB(255, 220, 190),
        SubTabText = Color3.fromRGB(140, 100, 60),
        SubTabHoverBackground = Color3.fromRGB(255, 210, 170),
        SubTabActiveBackground = Color3.fromRGB(255, 150, 80),
        SubTabActiveText = Color3.fromRGB(100, 60, 20),
        SubTabActiveIndicatorColor = Color3.fromRGB(100, 60, 20),
        UserInfoBackground = Color3.fromRGB(255, 225, 200),
        UserNameText = Color3.fromRGB(110, 70, 30),
        UserTagText = Color3.fromRGB(150, 110, 70),
        ContentBackground = Color3.fromRGB(255, 245, 230),
        SectionBoxBackground = Color3.fromRGB(255, 230, 200),
        SectionHeaderBackground = Color3.fromRGB(255, 225, 195),
        SectionHeaderTextColor = Color3.fromRGB(120, 80, 40),
        SectionLineColor = Color3.fromRGB(255, 215, 180),
        LabelText = Color3.fromRGB(110, 70, 30),
        DescriptionText = Color3.fromRGB(150, 110, 70),
        ErrorTextColor = Color3.fromRGB(220, 80, 40),
        ButtonBackground = Color3.fromRGB(255, 180, 120),
        ButtonText = Color3.fromRGB(100, 60, 20),
        ButtonHoverBackground = Color3.fromRGB(255, 160, 100),
        ToggleCheckboxBackground = Color3.fromRGB(255, 225, 195),
        ToggleCheckboxBorderColor = Color3.fromRGB(255, 190, 140),
        ToggleCheckboxFilledColor = Color3.fromRGB(255, 150, 80),
        ToggleLabelText = Color3.fromRGB(110, 70, 30),
        InputBackground = Color3.fromRGB(255, 250, 240),
        InputText = Color3.fromRGB(100, 60, 20),
        InputPlaceholder = Color3.fromRGB(170, 140, 100),
        InputBorderColor = Color3.fromRGB(255, 200, 150),
        InputErrorBorderColor = Color3.fromRGB(220, 80, 40),
        SliderTrack = Color3.fromRGB(255, 210, 170),
        SliderProgress = Color3.fromRGB(255, 150, 80),
        SliderThumb = Color3.fromRGB(130, 90, 50),
        SliderInputBackground = Color3.fromRGB(255, 245, 235),
        DropdownButton = Color3.fromRGB(255, 200, 150),
        DropdownBackground = Color3.fromRGB(255, 240, 220),
        DropdownItemHover = Color3.fromRGB(255, 190, 140),
        DropdownMultiItemSelectedBg = Color3.fromRGB(255, 170, 110),
        DropdownBorderColor = Color3.fromRGB(255, 190, 140),
        SeparatorLineColor = Color3.fromRGB(255, 225, 205),
        CloseButtonText = Color3.fromRGB(130, 90, 50),
        MinimizeButtonText = Color3.fromRGB(130, 90, 50),
        MiniLogoColor = Color3.fromRGB(255, 150, 80),
        LoadingTextColor = Color3.fromRGB(110, 70, 30),
        TooltipBackground = Color3.fromRGB(255, 250, 245),
        TooltipText = Color3.fromRGB(100, 60, 20),
        TooltipBorderColor = Color3.fromRGB(255, 190, 140),
        ScrollBarColor = Color3.fromRGB(200, 150, 100)
    }
)
Themes.amethystglow =
    MergeTables(
    Themes.default,
    {
        Name = "Amethyst Glow",
        WindowBackground = Color3.fromRGB(55, 45, 75),
        TopBarBackground = Color3.fromRGB(40, 30, 60),
        TopBarText = Color3.fromRGB(230, 220, 250),
        ScriptNamePillBackground = Color3.fromRGB(160, 120, 220),
        ScriptNamePillText = Color3.fromRGB(30, 20, 50),
        VersionText = Color3.fromRGB(170, 160, 200),
        LeftNavBackground = Color3.fromRGB(45, 35, 65),
        CategoryHeaderBackground = Color3.fromRGB(45, 35, 65),
        CategoryHeaderText = Color3.fromRGB(210, 200, 240),
        CategoryArrowColor = Color3.fromRGB(190, 180, 220),
        SubTabBackground = Color3.fromRGB(45, 35, 65),
        SubTabText = Color3.fromRGB(190, 180, 220),
        SubTabHoverBackground = Color3.fromRGB(65, 55, 85),
        SubTabActiveBackground = Color3.fromRGB(160, 120, 220),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(220, 200, 255),
        UserInfoBackground = Color3.fromRGB(35, 25, 55),
        UserNameText = Color3.fromRGB(225, 215, 250),
        UserTagText = Color3.fromRGB(170, 160, 200),
        ContentBackground = Color3.fromRGB(60, 50, 80),
        SectionBoxBackground = Color3.fromRGB(50, 40, 70),
        SectionHeaderBackground = Color3.fromRGB(45, 35, 65),
        SectionHeaderTextColor = Color3.fromRGB(220, 210, 245),
        SectionLineColor = Color3.fromRGB(70, 60, 90),
        LabelText = Color3.fromRGB(225, 215, 250),
        DescriptionText = Color3.fromRGB(170, 160, 200),
        ErrorTextColor = Color3.fromRGB(255, 100, 100),
        ButtonBackground = Color3.fromRGB(120, 90, 180),
        ButtonText = Color3.fromRGB(240, 230, 255),
        ButtonHoverBackground = Color3.fromRGB(140, 110, 200),
        ToggleCheckboxBackground = Color3.fromRGB(80, 70, 110),
        ToggleCheckboxBorderColor = Color3.fromRGB(100, 90, 130),
        ToggleCheckboxFilledColor = Color3.fromRGB(160, 120, 220),
        ToggleLabelText = Color3.fromRGB(225, 215, 250),
        InputBackground = Color3.fromRGB(35, 25, 55),
        InputText = Color3.fromRGB(230, 220, 250),
        InputPlaceholder = Color3.fromRGB(150, 140, 180),
        InputBorderColor = Color3.fromRGB(80, 70, 110),
        InputErrorBorderColor = Color3.fromRGB(220, 80, 80),
        SliderTrack = Color3.fromRGB(80, 70, 110),
        SliderProgress = Color3.fromRGB(160, 120, 220),
        SliderThumb = Color3.fromRGB(210, 190, 240),
        SliderInputBackground = Color3.fromRGB(40, 30, 60),
        DropdownButton = Color3.fromRGB(80, 70, 110),
        DropdownBackground = Color3.fromRGB(45, 35, 65),
        DropdownItemHover = Color3.fromRGB(100, 80, 140),
        DropdownMultiItemSelectedBg = Color3.fromRGB(130, 100, 190),
        DropdownBorderColor = Color3.fromRGB(100, 90, 130),
        SeparatorLineColor = Color3.fromRGB(75, 65, 95),
        CloseButtonText = Color3.fromRGB(210, 190, 240),
        MinimizeButtonText = Color3.fromRGB(210, 190, 240),
        MiniLogoColor = Color3.fromRGB(160, 120, 220),
        LoadingTextColor = Color3.fromRGB(220, 210, 245),
        TooltipBackground = Color3.fromRGB(30, 20, 50),
        TooltipText = Color3.fromRGB(230, 220, 250),
        TooltipBackgroundTransparency = 0.1,
        TooltipBorderColor = Color3.fromRGB(80, 70, 110),
        ScrollBarColor = Color3.fromRGB(100, 80, 140)
    }
)
Themes.enhancedlight =
    MergeTables(
    Themes.default,
    {
        Name = "Enhanced Light",
        WindowBackground = Color3.fromRGB(247, 248, 250),
        TopBarBackground = Color3.fromRGB(235, 238, 242),
        TopBarText = Color3.fromRGB(30, 35, 40),
        ScriptNamePillBackground = Color3.fromRGB(0, 122, 204),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(100, 105, 110),
        LeftNavBackground = Color3.fromRGB(240, 242, 245),
        CategoryHeaderBackground = Color3.fromRGB(240, 242, 245),
        CategoryHeaderText = Color3.fromRGB(50, 55, 60),
        CategoryArrowColor = Color3.fromRGB(100, 105, 110),
        SubTabBackground = Color3.fromRGB(240, 242, 245),
        SubTabText = Color3.fromRGB(70, 75, 80),
        SubTabHoverBackground = Color3.fromRGB(225, 230, 235),
        SubTabActiveBackground = Color3.fromRGB(0, 122, 204),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(20, 25, 30),
        UserInfoBackground = Color3.fromRGB(230, 232, 235),
        UserNameText = Color3.fromRGB(40, 45, 50),
        UserTagText = Color3.fromRGB(120, 125, 130),
        ContentBackground = Color3.fromRGB(252, 253, 255),
        SectionBoxBackground = Color3.fromRGB(242, 245, 248),
        SectionHeaderBackground = Color3.fromRGB(238, 240, 243),
        SectionHeaderTextColor = Color3.fromRGB(50, 55, 60),
        SectionLineColor = Color3.fromRGB(220, 225, 230),
        LabelText = Color3.fromRGB(40, 45, 55),
        DescriptionText = Color3.fromRGB(90, 95, 105),
        ErrorTextColor = Color3.fromRGB(200, 0, 0),
        ButtonBackground = Color3.fromRGB(210, 215, 220),
        ButtonText = Color3.fromRGB(30, 35, 40),
        ButtonHoverBackground = Color3.fromRGB(195, 200, 205),
        ToggleCheckboxBackground = Color3.fromRGB(220, 225, 230),
        ToggleCheckboxBorderColor = Color3.fromRGB(190, 195, 200),
        ToggleCheckboxFilledColor = Color3.fromRGB(0, 122, 204),
        ToggleLabelText = Color3.fromRGB(40, 45, 55),
        InputBackground = Color3.fromRGB(255, 255, 255),
        InputText = Color3.fromRGB(20, 25, 30),
        InputPlaceholder = Color3.fromRGB(140, 145, 150),
        InputBorderColor = Color3.fromRGB(200, 205, 210),
        InputErrorBorderColor = Color3.fromRGB(220, 50, 50),
        SliderTrack = Color3.fromRGB(210, 215, 220),
        SliderProgress = Color3.fromRGB(0, 122, 204),
        SliderThumb = Color3.fromRGB(80, 85, 90),
        SliderInputBackground = Color3.fromRGB(248, 250, 252),
        DropdownButton = Color3.fromRGB(225, 230, 235),
        DropdownBackground = Color3.fromRGB(245, 248, 250),
        DropdownItemHover = Color3.fromRGB(210, 215, 220),
        DropdownMultiItemSelectedBg = Color3.fromRGB(180, 205, 230),
        DropdownBorderColor = Color3.fromRGB(190, 195, 200),
        SeparatorLineColor = Color3.fromRGB(225, 230, 235),
        CloseButtonText = Color3.fromRGB(80, 85, 90),
        MinimizeButtonText = Color3.fromRGB(80, 85, 90),
        MiniLogoColor = Color3.fromRGB(0, 122, 204),
        LoadingTextColor = Color3.fromRGB(60, 65, 70),
        TooltipBackground = Color3.fromRGB(250, 252, 255),
        TooltipText = Color3.fromRGB(30, 35, 40),
        TooltipBackgroundTransparency = 0.03,
        TooltipBorderColor = Color3.fromRGB(200, 205, 210),
        ScrollBarColor = Color3.fromRGB(180, 180, 180)
    }
)
Themes.forestnight =
    MergeTables(
    Themes.default,
    {
        Name = "Forest Night",
        WindowBackground = Color3.fromRGB(30, 40, 35),
        TopBarBackground = Color3.fromRGB(25, 30, 28),
        TopBarText = Color3.fromRGB(200, 210, 205),
        ScriptNamePillBackground = Color3.fromRGB(100, 160, 120),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(140, 150, 145),
        LeftNavBackground = Color3.fromRGB(35, 45, 40),
        CategoryHeaderBackground = Color3.fromRGB(35, 45, 40),
        CategoryHeaderText = Color3.fromRGB(180, 190, 185),
        CategoryArrowColor = Color3.fromRGB(160, 170, 165),
        SubTabBackground = Color3.fromRGB(35, 45, 40),
        SubTabText = Color3.fromRGB(160, 170, 165),
        SubTabHoverBackground = Color3.fromRGB(50, 60, 55),
        SubTabActiveBackground = Color3.fromRGB(100, 160, 120),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(255, 255, 255),
        UserInfoBackground = Color3.fromRGB(30, 38, 33),
        UserNameText = Color3.fromRGB(190, 200, 195),
        UserTagText = Color3.fromRGB(130, 140, 135),
        ContentBackground = Color3.fromRGB(40, 50, 45),
        SectionBoxBackground = Color3.fromRGB(35, 45, 40),
        SectionHeaderBackground = Color3.fromRGB(32, 42, 37),
        SectionHeaderTextColor = Color3.fromRGB(190, 200, 195),
        SectionLineColor = Color3.fromRGB(55, 65, 60),
        LabelText = Color3.fromRGB(195, 205, 200),
        DescriptionText = Color3.fromRGB(140, 150, 145),
        ErrorTextColor = Color3.fromRGB(230, 90, 90),
        ButtonBackground = Color3.fromRGB(70, 100, 80),
        ButtonText = Color3.fromRGB(220, 230, 225),
        ButtonHoverBackground = Color3.fromRGB(90, 120, 100),
        ToggleCheckboxBackground = Color3.fromRGB(60, 75, 65),
        ToggleCheckboxBorderColor = Color3.fromRGB(80, 95, 85),
        ToggleCheckboxFilledColor = Color3.fromRGB(100, 160, 120),
        ToggleLabelText = Color3.fromRGB(195, 205, 200),
        InputBackground = Color3.fromRGB(25, 35, 30),
        InputText = Color3.fromRGB(200, 210, 205),
        InputPlaceholder = Color3.fromRGB(110, 120, 115),
        InputBorderColor = Color3.fromRGB(60, 75, 65),
        InputErrorBorderColor = Color3.fromRGB(200, 70, 70),
        SliderTrack = Color3.fromRGB(60, 75, 65),
        SliderProgress = Color3.fromRGB(100, 160, 120),
        SliderThumb = Color3.fromRGB(180, 190, 185),
        SliderInputBackground = Color3.fromRGB(30, 40, 35),
        DropdownButton = Color3.fromRGB(60, 75, 65),
        DropdownBackground = Color3.fromRGB(30, 40, 35),
        DropdownItemHover = Color3.fromRGB(80, 95, 85),
        DropdownMultiItemSelectedBg = Color3.fromRGB(80, 130, 100),
        DropdownBorderColor = Color3.fromRGB(80, 95, 85),
        SeparatorLineColor = Color3.fromRGB(65, 75, 70),
        CloseButtonText = Color3.fromRGB(180, 190, 185),
        MinimizeButtonText = Color3.fromRGB(180, 190, 185),
        MiniLogoColor = Color3.fromRGB(100, 160, 120),
        LoadingTextColor = Color3.fromRGB(190, 200, 195),
        TooltipBackground = Color3.fromRGB(20, 25, 22),
        TooltipText = Color3.fromRGB(200, 210, 205),
        TooltipBackgroundTransparency = 0.1,
        TooltipBorderColor = Color3.fromRGB(60, 75, 65),
        ScrollBarColor = Color3.fromRGB(80, 95, 85)
    }
)
Themes.charcoalslate =
    MergeTables(
    Themes.default,
    {
        Name = "Charcoal Slate",
        WindowBackground = Color3.fromRGB(28, 28, 32),
        TopBarBackground = Color3.fromRGB(22, 22, 26),
        TopBarText = Color3.fromRGB(200, 200, 205),
        ScriptNamePillBackground = Color3.fromRGB(120, 120, 130),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(140, 140, 145),
        LeftNavBackground = Color3.fromRGB(32, 32, 36),
        CategoryHeaderBackground = Color3.fromRGB(32, 32, 36),
        CategoryHeaderText = Color3.fromRGB(180, 180, 185),
        CategoryArrowColor = Color3.fromRGB(160, 160, 165),
        SubTabBackground = Color3.fromRGB(32, 32, 36),
        SubTabText = Color3.fromRGB(160, 160, 165),
        SubTabHoverBackground = Color3.fromRGB(45, 45, 50),
        SubTabActiveBackground = Color3.fromRGB(120, 120, 130),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(200, 200, 205),
        UserInfoBackground = Color3.fromRGB(26, 26, 30),
        UserNameText = Color3.fromRGB(190, 190, 195),
        UserTagText = Color3.fromRGB(130, 130, 135),
        ContentBackground = Color3.fromRGB(36, 36, 40),
        SectionBoxBackground = Color3.fromRGB(32, 32, 36),
        SectionHeaderBackground = Color3.fromRGB(30, 30, 34),
        SectionHeaderTextColor = Color3.fromRGB(190, 190, 195),
        SectionLineColor = Color3.fromRGB(50, 50, 55),
        LabelText = Color3.fromRGB(195, 195, 200),
        DescriptionText = Color3.fromRGB(140, 140, 145),
        ErrorTextColor = Color3.fromRGB(240, 80, 80),
        ButtonBackground = Color3.fromRGB(70, 70, 80),
        ButtonText = Color3.fromRGB(210, 210, 215),
        ButtonHoverBackground = Color3.fromRGB(90, 90, 100),
        ToggleCheckboxBackground = Color3.fromRGB(60, 60, 70),
        ToggleCheckboxBorderColor = Color3.fromRGB(80, 80, 90),
        ToggleCheckboxFilledColor = Color3.fromRGB(120, 120, 130),
        ToggleLabelText = Color3.fromRGB(195, 195, 200),
        InputBackground = Color3.fromRGB(20, 20, 24),
        InputText = Color3.fromRGB(200, 200, 205),
        InputPlaceholder = Color3.fromRGB(110, 110, 115),
        InputBorderColor = Color3.fromRGB(60, 60, 70),
        InputErrorBorderColor = Color3.fromRGB(200, 60, 60),
        SliderTrack = Color3.fromRGB(60, 60, 70),
        SliderProgress = Color3.fromRGB(120, 120, 130),
        SliderThumb = Color3.fromRGB(180, 180, 185),
        SliderInputBackground = Color3.fromRGB(25, 25, 28),
        DropdownButton = Color3.fromRGB(60, 60, 70),
        DropdownBackground = Color3.fromRGB(28, 28, 32),
        DropdownItemHover = Color3.fromRGB(80, 80, 90),
        DropdownMultiItemSelectedBg = Color3.fromRGB(100, 100, 110),
        DropdownBorderColor = Color3.fromRGB(80, 80, 90),
        SeparatorLineColor = Color3.fromRGB(55, 55, 60),
        CloseButtonText = Color3.fromRGB(180, 180, 185),
        MinimizeButtonText = Color3.fromRGB(180, 180, 185),
        MiniLogoColor = Color3.fromRGB(120, 120, 130),
        LoadingTextColor = Color3.fromRGB(190, 190, 195),
        TooltipBackground = Color3.fromRGB(18, 18, 22),
        TooltipText = Color3.fromRGB(200, 200, 205),
        TooltipBackgroundTransparency = 0.08,
        TooltipBorderColor = Color3.fromRGB(60, 60, 70),
        ScrollBarColor = Color3.fromRGB(80, 80, 90)
    }
)
Themes.sunsetorange =
    MergeTables(
    Themes.default,
    {
        Name = "Sunset Orange",
        WindowBackground = Color3.fromRGB(40, 30, 25),
        TopBarBackground = Color3.fromRGB(60, 40, 30),
        TopBarText = Color3.fromRGB(255, 180, 120),
        ScriptNamePillBackground = Color3.fromRGB(255, 120, 50),
        ScriptNamePillText = Color3.fromRGB(255, 255, 255),
        VersionText = Color3.fromRGB(200, 150, 110),
        LeftNavBackground = Color3.fromRGB(50, 35, 28),
        CategoryHeaderBackground = Color3.fromRGB(50, 35, 28),
        CategoryHeaderText = Color3.fromRGB(255, 160, 100),
        CategoryArrowColor = Color3.fromRGB(255, 190, 140),
        SubTabBackground = Color3.fromRGB(50, 35, 28),
        SubTabText = Color3.fromRGB(255, 190, 140),
        SubTabHoverBackground = Color3.fromRGB(70, 50, 40),
        SubTabActiveBackground = Color3.fromRGB(255, 120, 50),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(255, 255, 255),
        UserInfoBackground = Color3.fromRGB(45, 32, 26),
        UserNameText = Color3.fromRGB(255, 200, 160),
        UserTagText = Color3.fromRGB(200, 150, 110),
        ContentBackground = Color3.fromRGB(45, 32, 26),
        SectionBoxBackground = Color3.fromRGB(55, 40, 35),
        SectionHeaderBackground = Color3.fromRGB(50, 35, 30),
        SectionHeaderTextColor = Color3.fromRGB(255, 170, 110),
        SectionLineColor = Color3.fromRGB(75, 55, 45),
        LabelText = Color3.fromRGB(255, 200, 160),
        DescriptionText = Color3.fromRGB(200, 150, 110),
        ErrorTextColor = Color3.fromRGB(255, 100, 80),
        ButtonBackground = Color3.fromRGB(230, 100, 40),
        ButtonText = Color3.fromRGB(255, 230, 210),
        ButtonHoverBackground = Color3.fromRGB(255, 130, 70),
        ToggleCheckboxBackground = Color3.fromRGB(80, 50, 35),
        ToggleCheckboxBorderColor = Color3.fromRGB(100, 70, 50),
        ToggleCheckboxFilledColor = Color3.fromRGB(255, 120, 50),
        ToggleLabelText = Color3.fromRGB(255, 200, 160),
        InputBackground = Color3.fromRGB(30, 20, 15),
        InputText = Color3.fromRGB(255, 200, 160),
        InputPlaceholder = Color3.fromRGB(180, 130, 90),
        InputBorderColor = Color3.fromRGB(80, 50, 35),
        InputErrorBorderColor = Color3.fromRGB(255, 80, 60),
        SliderTrack = Color3.fromRGB(80, 50, 35),
        SliderProgress = Color3.fromRGB(255, 120, 50),
        SliderThumb = Color3.fromRGB(255, 180, 120),
        SliderInputBackground = Color3.fromRGB(35, 25, 20),
        DropdownButton = Color3.fromRGB(80, 50, 35),
        DropdownBackground = Color3.fromRGB(50, 35, 28),
        DropdownItemHover = Color3.fromRGB(100, 70, 50),
        DropdownMultiItemSelectedBg = Color3.fromRGB(200, 90, 40),
        DropdownBorderColor = Color3.fromRGB(100, 70, 50),
        SeparatorLineColor = Color3.fromRGB(70, 45, 32),
        CloseButtonText = Color3.fromRGB(255, 180, 120),
        MinimizeButtonText = Color3.fromRGB(255, 180, 120),
        MiniLogoColor = Color3.fromRGB(255, 120, 50),
        LoadingTextColor = Color3.fromRGB(255, 180, 120),
        TooltipBackground = Color3.fromRGB(25, 15, 10),
        TooltipText = Color3.fromRGB(255, 200, 160),
        TooltipBorderColor = Color3.fromRGB(80, 50, 35),
        ScrollBarColor = Color3.fromRGB(100, 70, 50)
    }
)
Themes.cyberpunknight =
    MergeTables(
    Themes.default,
    {
        Name = "Cyberpunk Night",
        WindowBackground = Color3.fromRGB(12, 10, 30),
        TopBarBackground = Color3.fromRGB(20, 18, 45),
        TopBarText = Color3.fromRGB(0, 255, 255),
        ScriptNamePillBackground = Color3.fromRGB(255, 0, 150),
        ScriptNamePillText = Color3.fromRGB(15, 15, 15),
        VersionText = Color3.fromRGB(150, 150, 200),
        LeftNavBackground = Color3.fromRGB(18, 15, 40),
        CategoryHeaderBackground = Color3.fromRGB(18, 15, 40),
        CategoryHeaderText = Color3.fromRGB(0, 220, 220),
        CategoryArrowColor = Color3.fromRGB(180, 180, 255),
        SubTabBackground = Color3.fromRGB(18, 15, 40),
        SubTabText = Color3.fromRGB(180, 180, 255),
        SubTabHoverBackground = Color3.fromRGB(30, 25, 60),
        SubTabActiveBackground = Color3.fromRGB(255, 0, 150),
        SubTabActiveText = Color3.fromRGB(255, 255, 255),
        SubTabActiveIndicatorColor = Color3.fromRGB(0, 255, 255),
        UserInfoBackground = Color3.fromRGB(15, 12, 35),
        UserNameText = Color3.fromRGB(220, 220, 255),
        UserTagText = Color3.fromRGB(150, 150, 200),
        ContentBackground = Color3.fromRGB(15, 12, 35),
        SectionBoxBackground = Color3.fromRGB(22, 20, 50),
        SectionHeaderBackground = Color3.fromRGB(20, 18, 48),
        SectionHeaderTextColor = Color3.fromRGB(0, 255, 255),
        SectionLineColor = Color3.fromRGB(40, 30, 80),
        LabelText = Color3.fromRGB(220, 220, 255),
        DescriptionText = Color3.fromRGB(150, 150, 200),
        ErrorTextColor = Color3.fromRGB(255, 50, 100),
        ButtonBackground = Color3.fromRGB(80, 0, 180),
        ButtonText = Color3.fromRGB(0, 255, 255),
        ButtonHoverBackground = Color3.fromRGB(100, 30, 200),
        ToggleCheckboxBackground = Color3.fromRGB(40, 30, 80),
        ToggleCheckboxBorderColor = Color3.fromRGB(60, 40, 100),
        ToggleCheckboxFilledColor = Color3.fromRGB(255, 0, 150),
        ToggleLabelText = Color3.fromRGB(220, 220, 255),
        InputBackground = Color3.fromRGB(10, 8, 25),
        InputText = Color3.fromRGB(200, 200, 255),
        InputPlaceholder = Color3.fromRGB(120, 120, 180),
        InputBorderColor = Color3.fromRGB(40, 30, 80),
        InputErrorBorderColor = Color3.fromRGB(255, 0, 80),
        SliderTrack = Color3.fromRGB(40, 30, 80),
        SliderProgress = Color3.fromRGB(255, 0, 150),
        SliderThumb = Color3.fromRGB(0, 255, 255),
        SliderInputBackground = Color3.fromRGB(15, 12, 30),
        DropdownButton = Color3.fromRGB(40, 30, 80),
        DropdownBackground = Color3.fromRGB(18, 15, 40),
        DropdownItemHover = Color3.fromRGB(60, 40, 100),
        DropdownMultiItemSelectedBg = Color3.fromRGB(120, 0, 200),
        DropdownBorderColor = Color3.fromRGB(60, 40, 100),
        SeparatorLineColor = Color3.fromRGB(35, 28, 70),
        CloseButtonText = Color3.fromRGB(0, 220, 220),
        MinimizeButtonText = Color3.fromRGB(0, 220, 220),
        MiniLogoColor = Color3.fromRGB(255, 0, 150),
        LoadingTextColor = Color3.fromRGB(0, 255, 255),
        TooltipBackground = Color3.fromRGB(5, 3, 15),
        TooltipText = Color3.fromRGB(200, 200, 255),
        TooltipBackgroundTransparency = 0.05,
        TooltipBorderColor = Color3.fromRGB(40, 30, 80),
        ScrollBarColor = Color3.fromRGB(60, 40, 100)
    }
)
Themes.monochromeclassic =
    MergeTables(
    Themes.default,
    {
        Name = "Monochrome Classic",
        WindowBackground = Color3.fromRGB(230, 230, 230),
        TopBarBackground = Color3.fromRGB(200, 200, 200),
        TopBarText = Color3.fromRGB(30, 30, 30),
        ScriptNamePillBackground = Color3.fromRGB(80, 80, 80),
        ScriptNamePillText = Color3.fromRGB(240, 240, 240),
        VersionText = Color3.fromRGB(90, 90, 90),
        LeftNavBackground = Color3.fromRGB(215, 215, 215),
        CategoryHeaderBackground = Color3.fromRGB(215, 215, 215),
        CategoryHeaderText = Color3.fromRGB(50, 50, 50),
        CategoryArrowColor = Color3.fromRGB(70, 70, 70),
        SubTabBackground = Color3.fromRGB(215, 215, 215),
        SubTabText = Color3.fromRGB(70, 70, 70),
        SubTabHoverBackground = Color3.fromRGB(190, 190, 190),
        SubTabActiveBackground = Color3.fromRGB(80, 80, 80),
        SubTabActiveText = Color3.fromRGB(250, 250, 250),
        SubTabActiveIndicatorColor = Color3.fromRGB(50, 50, 50),
        UserInfoBackground = Color3.fromRGB(220, 220, 220),
        UserNameText = Color3.fromRGB(40, 40, 40),
        UserTagText = Color3.fromRGB(100, 100, 100),
        ContentBackground = Color3.fromRGB(245, 245, 245),
        SectionBoxBackground = Color3.fromRGB(225, 225, 225),
        SectionHeaderBackground = Color3.fromRGB(220, 220, 220),
        SectionHeaderTextColor = Color3.fromRGB(40, 40, 40),
        SectionLineColor = Color3.fromRGB(200, 200, 200),
        LabelText = Color3.fromRGB(20, 20, 20),
        DescriptionText = Color3.fromRGB(90, 90, 90),
        ErrorTextColor = Color3.fromRGB(180, 20, 20),
        ButtonBackground = Color3.fromRGB(180, 180, 180),
        ButtonText = Color3.fromRGB(10, 10, 10),
        ButtonHoverBackground = Color3.fromRGB(160, 160, 160),
        ToggleCheckboxBackground = Color3.fromRGB(200, 200, 200),
        ToggleCheckboxBorderColor = Color3.fromRGB(150, 150, 150),
        ToggleCheckboxFilledColor = Color3.fromRGB(80, 80, 80),
        ToggleLabelText = Color3.fromRGB(20, 20, 20),
        InputBackground = Color3.fromRGB(250, 250, 250),
        InputText = Color3.fromRGB(15, 15, 15),
        InputPlaceholder = Color3.fromRGB(120, 120, 120),
        InputBorderColor = Color3.fromRGB(170, 170, 170),
        InputErrorBorderColor = Color3.fromRGB(180, 20, 20),
        SliderTrack = Color3.fromRGB(190, 190, 190),
        SliderProgress = Color3.fromRGB(80, 80, 80),
        SliderThumb = Color3.fromRGB(50, 50, 50),
        SliderInputBackground = Color3.fromRGB(240, 240, 240),
        DropdownButton = Color3.fromRGB(200, 200, 200),
        DropdownBackground = Color3.fromRGB(230, 230, 230),
        DropdownItemHover = Color3.fromRGB(170, 170, 170),
        DropdownMultiItemSelectedBg = Color3.fromRGB(120, 120, 120),
        DropdownBorderColor = Color3.fromRGB(150, 150, 150),
        SeparatorLineColor = Color3.fromRGB(210, 210, 210),
        CloseButtonText = Color3.fromRGB(50, 50, 50),
        MinimizeButtonText = Color3.fromRGB(50, 50, 50),
        MiniLogoColor = Color3.fromRGB(80, 80, 80),
        LoadingTextColor = Color3.fromRGB(60, 60, 60),
        TooltipBackground = Color3.fromRGB(250, 250, 250),
        TooltipText = Color3.fromRGB(30, 30, 30),
        TooltipBackgroundTransparency = 0.03,
        TooltipBorderColor = Color3.fromRGB(170, 170, 170),
        ScrollBarColor = Color3.fromRGB(150, 150, 150)
    }
)

TrxLib.Themes = MergeTables(Themes)

local ARROW_ASSET_ID_OPEN = "rbxassetid://16848361125"

function TrxLib:ApplyTheme(themeName)
    themeName = string.lower(themeName)
    if not Themes[themeName] then
        warn("TrxLib: Theme '" .. themeName .. "' not found. Using default.")
        themeName = "default"
    end
    self.Theme = table.clone(Themes[themeName])
    for k, v in pairs(Themes.default) do
        if self.Theme[k] == nil then
            self.Theme[k] = v
        end
    end
    self.InitialTheme = themeName
    self.Theme.WindowBorderSize = 0

    self.MainWindow.BackgroundColor3 = self.Theme.WindowBackground
    self.MainWindow.BorderSizePixel = self.Theme.WindowBorderSize
    local mainCorner = self.MainWindow:FindFirstChildOfClass("UICorner")
    if mainCorner then
        mainCorner.CornerRadius = UDim.new(0, self.Theme.CornerRadius)
    end

    self.TopBar.BackgroundColor3 = self.Theme.TopBarBackground
    self.TopBar.Size = UDim2.new(1, 0, 0, self.Theme.TopBarHeight)

    if self.HubNameLabel then
        self.HubNameLabel.TextColor3 = self.Theme.TopBarText
    end
    local scriptNamePillFrame = self.TopBar:FindFirstChild("ScriptNamePillFrame")
    if scriptNamePillFrame then
        scriptNamePillFrame.BackgroundColor3 = self.Theme.ScriptNamePillBackground
        local pillText = scriptNamePillFrame:FindFirstChild("ScriptNamePillText")
        if pillText then
            pillText.TextColor3 = self.Theme.ScriptNamePillText
        end
        local pillCorner = scriptNamePillFrame:FindFirstChildOfClass("UICorner")
        if pillCorner then
            pillCorner.CornerRadius = UDim.new(0, self.Theme.ScriptNamePillVCorners)
        end
        local pillPadding = scriptNamePillFrame:FindFirstChildOfClass("UIPadding")
        if pillPadding then
            pillPadding.PaddingLeft = UDim.new(0, self.Theme.ScriptNamePillHPadding)
            pillPadding.PaddingRight = UDim.new(0, self.Theme.ScriptNamePillHPadding)
        end
    end
    if self.VersionLabel then
        self.VersionLabel.TextColor3 = self.Theme.VersionText
    end
    if self.CloseButton then
        self.CloseButton.TextColor3 = self.Theme.CloseButtonText
    end
    if self.MinimizeButton then
        self.MinimizeButton.TextColor3 = self.Theme.MinimizeButtonText
    end

    self.LeftNavArea.BackgroundColor3 = self.Theme.LeftNavBackground

    self.CategoriesScroll.BackgroundColor3 = self.Theme.LeftNavBackground
    self.CategoriesScroll.ScrollBarImageColor3 = self.Theme.ScrollBarColor

    self.UserInfoArea.BackgroundColor3 = self.Theme.UserInfoBackground
    local userSep = self.UserInfoArea:FindFirstChild("UserInfoTopSeparator")
    if userSep then
        userSep.BackgroundTransparency = 1
    end
    if self.UserNameLabel then
        self.UserNameLabel.TextColor3 = self.Theme.UserNameText
    end
    if self.UserTagLabel then
        self.UserTagLabel.TextColor3 = self.Theme.UserTagText
    end
    if self.UserIcon then
        local userIconCorner = self.UserIcon:FindFirstChildOfClass("UICorner")
        if userIconCorner then
            userIconCorner.CornerRadius = UDim.new(0, self.Theme.ButtonCornerRadius)
        end
    end

    self.ContentArea.BackgroundColor3 = self.Theme.ContentBackground
    self.ContentArea.BackgroundTransparency = self.Theme.ContentTransparency

    for _, category in ipairs(self.Categories) do
        category.HeaderButton.BackgroundColor3 = self.Theme.CategoryHeaderBackground
        local catNameLabel = category.HeaderButton:FindFirstChild("CategoryNameLabel")
        if catNameLabel then
            catNameLabel.TextColor3 = self.Theme.CategoryHeaderText
        end
        local catArrow = category.HeaderButton:FindFirstChild("CategoryArrow")
        if catArrow then
            catArrow.ImageColor3 = self.Theme.CategoryArrowColor
            catArrow.Rotation = category.IsExpanded and 0 or -90 -- Apply rotation based on state
        end

        for _, subTab in ipairs(category.SubTabs) do
            local isActive = (subTab == self.ActiveSubTab)
            subTab.Button.BackgroundColor3 =
                isActive and self.Theme.SubTabActiveBackground or self.Theme.SubTabBackground

            local subTabNameLabel = subTab.Button:FindFirstChild("SubTabNameLabel")
            if subTabNameLabel then
                subTabNameLabel.TextColor3 = isActive and self.Theme.SubTabActiveText or self.Theme.SubTabText
            end

            if subTab.ActiveIndicator then
                subTab.ActiveIndicator.BackgroundColor3 = self.Theme.SubTabActiveIndicatorColor
                subTab.ActiveIndicator.BackgroundTransparency = isActive and 0 or 1
            end

            local subTabCorner = subTab.Button:FindFirstChildOfClass("UICorner")
            if subTabCorner then
                subTabCorner.CornerRadius = UDim.new(0, self.Theme.SubTabCornerRadius)
            end

            if subTab.ContentFrame then
                subTab.ContentFrame.BackgroundColor3 = self.Theme.ContentBackground
                subTab.ContentFrame.BackgroundTransparency = self.Theme.ContentTransparency

                local cfp = subTab.ContentFrame:FindFirstChildOfClass("UIPadding")
                if cfp then
                    cfp.PaddingTop = UDim.new(0, self.Theme.Padding)
                    cfp.PaddingBottom = UDim.new(0, self.Theme.Padding)
                    cfp.PaddingLeft = UDim.new(0, self.Theme.Padding)
                    cfp.PaddingRight = UDim.new(0, self.Theme.Padding)
                end
                local cll = subTab.ContentFrame:FindFirstChildOfClass("UIListLayout")
                if cll then
                    cll.Padding = UDim.new(0, self.Theme.ControlSpacing)
                end

                for _, controlApi in ipairs(subTab.Controls) do
                    if controlApi.Gui and controlApi._ApplyThemeRecursive then
                        pcall(
                            function()
                                controlApi:_ApplyThemeRecursive(self.Theme)
                            end
                        )
                    end
                end
            end
        end
    end

    if self.MiniLogoButton and self.MiniLogoButton.Parent then
        self.MiniLogoButton.ImageColor3 = self.Theme.MiniLogoColor
        local miniCorner = self.MiniLogoButton:FindFirstChildOfClass("UICorner")
        if miniCorner then
            miniCorner.CornerRadius = UDim.new(0, self.Theme.CornerRadius)
        end
    end

    if self.GlobalTooltipFrame then
        self.GlobalTooltipFrame.BackgroundColor3 = self.Theme.TooltipBackground
        self.GlobalTooltipFrame.BackgroundTransparency = self.Theme.TooltipBackgroundTransparency or 0.05
        local ttLabel = self.GlobalTooltipFrame:FindFirstChild("TrxLib_TooltipTextLabel")
        if ttLabel then
            ttLabel.TextColor3 = self.Theme.TooltipText
        end
        local ttCorner = self.GlobalTooltipFrame:FindFirstChildOfClass("UICorner")
        if ttCorner then
            ttCorner.CornerRadius = UDim.new(0, math.max(0, self.Theme.CornerRadius - 2))
        end
        local ttBorder = self.GlobalTooltipFrame:FindFirstChildOfClass("UIStroke")
        if ttBorder then
            ttBorder.Color = self.Theme.TooltipBorderColor or Color3.fromRGB(60, 60, 65)
        end
    end
end

function TrxLib:_ManageDropdownState(dropdownApiToManage, shouldBeOpen)
    local openDropdownAPIs = self.OpenDropdownAPIs
    for i = #openDropdownAPIs, 1, -1 do
        local openDropdown = openDropdownAPIs[i]
        if openDropdown ~= dropdownApiToManage then
            if openDropdown.IsOpen and openDropdown.IsOpen() then
                if openDropdown.Close then
                    openDropdown.Close()
                end
            end
            table.remove(openDropdownAPIs, i)
        end
    end
    if shouldBeOpen then
        if dropdownApiToManage and not table.find(openDropdownAPIs, dropdownApiToManage) then
            table.insert(openDropdownAPIs, dropdownApiToManage)
        end
    else
        if dropdownApiToManage then
            for i = #openDropdownAPIs, 1, -1 do
                if openDropdownAPIs[i] == dropdownApiToManage then
                    table.remove(openDropdownAPIs, i)
                    break
                end
            end
        end
    end
end

function TrxLib:SelectSubTab(subTabToSelect)
    if self.ActiveSubTab == subTabToSelect and not self.IsLoading then
        return
    end
    self:_ManageDropdownState(nil, false)
    if self.ActiveSubTab then
        self.ActiveSubTab.Button.BackgroundColor3 = self.Theme.SubTabBackground
        self.ActiveSubTab.Button:FindFirstChild("SubTabNameLabel").TextColor3 = self.Theme.SubTabText
        self.ActiveSubTab.ActiveIndicator.BackgroundTransparency = 1
        if self.ActiveSubTab.ContentFrame then
            AnimateElementVisibility(self.ActiveSubTab.ContentFrame, false, 0.15)
        end
    end
    self.ActiveSubTab = subTabToSelect
    self.ActiveCategory = subTabToSelect.Category
    if self.ActiveSubTab then
        self.ActiveSubTab.Button.BackgroundColor3 = self.Theme.SubTabActiveBackground
        self.ActiveSubTab.Button:FindFirstChild("SubTabNameLabel").TextColor3 = self.Theme.SubTabActiveText
        self.ActiveSubTab.ActiveIndicator.BackgroundTransparency = 0
        if self.ActiveSubTab.ContentFrame then
            local originalBgTrans = self.ActiveSubTab.ContentFrame:GetAttribute("OriginalBackgroundTransparency")
            self.ActiveSubTab.ContentFrame.BackgroundTransparency =
                (originalBgTrans ~= nil and originalBgTrans) or self.Theme.ContentTransparency or 0
            if not self.IsLoading then
                AnimateElementVisibility(self.ActiveSubTab.ContentFrame, true, 0.2)
                for _, controlApi in ipairs(self.ActiveSubTab.Controls) do
                    if controlApi.Gui and controlApi.Gui.Parent == self.ActiveSubTab.ContentFrame then
                        AnimateElementVisibility(controlApi.Gui, true, 0.2)
                        if
                            controlApi.Type == "SectionContainer" and controlApi.Content and
                                controlApi.Content.IsExpanded
                         then
                            for _, childControlApi in ipairs(controlApi.Content.Controls) do
                                AnimateElementVisibility(childControlApi.Gui, true, 0.15)
                            end
                        end
                    end
                end
            else
                self.ActiveSubTab.ContentFrame.Visible = true
                for _, controlApi in ipairs(self.ActiveSubTab.Controls) do
                    if controlApi.Gui and controlApi.Gui.Parent == self.ActiveSubTab.ContentFrame then
                        controlApi.Gui.Visible = true
                        if
                            controlApi.Gui:IsA("Frame") or controlApi.Gui:IsA("TextButton") or
                                controlApi.Gui:IsA("TextBox") or
                                controlApi.Gui:IsA("ImageLabel") or
                                controlApi.Gui:IsA("ImageButton")
                         then
                            controlApi.Gui.BackgroundTransparency =
                                controlApi.Gui:GetAttribute("OriginalBackgroundTransparency") or 0
                        end
                        if
                            controlApi.Gui:IsA("TextLabel") or controlApi.Gui:IsA("TextButton") or
                                controlApi.Gui:IsA("TextBox")
                         then
                            controlApi.Gui.TextTransparency =
                                controlApi.Gui:GetAttribute("OriginalTextTransparency") or 0
                        end
                        if controlApi.Gui:IsA("ImageLabel") or controlApi.Gui:IsA("ImageButton") then
                            controlApi.Gui.ImageTransparency =
                                controlApi.Gui:GetAttribute("OriginalImageTransparency") or 0
                        end

                        if
                            controlApi.Type == "SectionContainer" and controlApi.Content and
                                controlApi.Content.IsExpanded
                         then
                            controlApi.Content.ContentFrame.Visible = true
                            for _, childControlApi in ipairs(controlApi.Content.Controls) do
                                childControlApi.Gui.Visible = true
                                if
                                    childControlApi.Gui:IsA("Frame") or childControlApi.Gui:IsA("TextButton") or
                                        childControlApi.Gui:IsA("TextBox") or
                                        childControlApi.Gui:IsA("ImageLabel") or
                                        childControlApi.Gui:IsA("ImageButton")
                                 then
                                    childControlApi.Gui.BackgroundTransparency =
                                        childControlApi.Gui:GetAttribute("OriginalBackgroundTransparency") or 0
                                end
                                if
                                    childControlApi.Gui:IsA("TextLabel") or childControlApi.Gui:IsA("TextButton") or
                                        childControlApi.Gui:IsA("TextBox")
                                 then
                                    childControlApi.Gui.TextTransparency =
                                        childControlApi.Gui:GetAttribute("OriginalTextTransparency") or 0
                                end
                                if childControlApi.Gui:IsA("ImageLabel") or childControlApi.Gui:IsA("ImageButton") then
                                    childControlApi.Gui.ImageTransparency =
                                        childControlApi.Gui:GetAttribute("OriginalImageTransparency") or 0
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    for _, categoryInLoop in ipairs(self.Categories) do
        if categoryInLoop == self.ActiveCategory and not categoryInLoop.IsExpanded then
            categoryInLoop.IsExpanded = true
            categoryInLoop.SubTabsFrame.Visible = true
            local arrow = categoryInLoop.HeaderButton:FindFirstChild("CategoryArrow")
            if arrow then
                arrow.Rotation = 0
            end
        end
    end
end

function TrxLib.New(options)
    task.wait(0.1)
    local self = setmetatable({}, TrxLib)
    options = options or {}
    self.HubName = options.HubName or "TrxLib Hub"
    self.ScriptName = options.ScriptName
    self.Version = options.Version
    self.WindowSize = options.WindowSize or UDim2.new(0, 800, 0, 550)
    self.UserInfo =
        options.UserInfo or
        {
            Name = (LocalPlayer and LocalPlayer.Name) or "User",
            Tag = (LocalPlayer and "@" .. LocalPlayer.Name) or "#0000"
        }
    self.InitialTheme = options.InitialTheme or "default"
    self.Theme = table.clone(Themes[string.lower(self.InitialTheme)] or Themes.default)
    for k, v in pairs(Themes.default) do
        if self.Theme[k] == nil then
            self.Theme[k] = v
        end
    end
    self.Theme.WindowBorderSize = 0

    self.MiniLogoImage = options.MiniLogoImage or self.Theme.MiniLogoDefault
    local logoSizeXOffset = (options.MiniLogoSize and options.MiniLogoSize.X.Offset) or 45
    local logoSizeYOffset = (options.MiniLogoSize and options.MiniLogoSize.Y.Offset) or 45
    self.MiniLogoSize = options.MiniLogoSize or UDim2.new(0, logoSizeXOffset, 0, logoSizeYOffset)
    self.CloseAction = options.CloseAction or "destroy"
    self.Categories = {}
    self.ActiveCategory = nil
    self.ActiveSubTab = nil
    self.OpenDropdownAPIs = {}
    self.IsLoading = true
    self.GlobalTooltipFrame = nil
    self.HighestZIndex = options.HighestZIndex or 20000 -- For Notifications

    self.ScreenGui =
        CreateInstance(
        "ScreenGui",
        {
            Name = game:GetService("HttpService"):GenerateGUID(false),
            Parent = game.CoreGui,
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
            ResetOnSpawn = false,
            DisplayOrder = options.DisplayOrder or 999
        }
    )
    local screenAbsoluteSize = self.ScreenGui.AbsoluteSize
    if screenAbsoluteSize.X == 0 or screenAbsoluteSize.Y == 0 then
        local conn
        conn =
            self.ScreenGui:GetPropertyChangedSignal("AbsoluteSize"):Connect(
            function()
                if self.ScreenGui.AbsoluteSize.X > 0 and self.ScreenGui.AbsoluteSize.Y > 0 then
                    screenAbsoluteSize = self.ScreenGui.AbsoluteSize
                    if conn then
                        conn:Disconnect()
                        conn = nil
                    end
                end
            end
        )
        if screenAbsoluteSize.X == 0 or screenAbsoluteSize.Y == 0 then
            RunService.Heartbeat:Wait()
        end
        screenAbsoluteSize = self.ScreenGui.AbsoluteSize
        if conn then
            conn:Disconnect()
        end
    end
    if screenAbsoluteSize.X == 0 or screenAbsoluteSize.Y == 0 then
        screenAbsoluteSize = Vector2.new(1920, 1080)
    end

    local defaultMiniLogoX = (screenAbsoluteSize.X - self.MiniLogoSize.X.Offset) / 2
    local defaultMiniLogoY = (screenAbsoluteSize.Y - self.MiniLogoSize.Y.Offset) / 2
    self.MiniLogoPosition = options.MiniLogoPosition or UDim2.new(0, defaultMiniLogoX, 0, defaultMiniLogoY)

    local startOffsetX = (screenAbsoluteSize.X - self.WindowSize.X.Offset) / 2
    local startOffsetY = (screenAbsoluteSize.Y - self.WindowSize.Y.Offset) / 2

    self.MainWindow =
        CreateInstance(
        "Frame",
        {
            Name = "MainWindow",
            Parent = self.ScreenGui,
            Size = self.WindowSize,
            Position = UDim2.new(0, startOffsetX, 0, startOffsetY),
            BackgroundColor3 = self.Theme.WindowBackground,
            BorderSizePixel = 0,
            ClipsDescendants = true,
            Visible = false
        }
    )
    CreateInstance("UICorner", {CornerRadius = UDim.new(0, self.Theme.CornerRadius), Parent = self.MainWindow})

    local finalMainWindowX = self.MainWindow.Position.X.Offset
    local finalMainWindowY = self.MainWindow.Position.Y.Offset

    self.TopBar =
        CreateInstance(
        "Frame",
        {
            Name = "TopBar",
            Parent = self.MainWindow,
            Size = UDim2.new(1, 0, 0, self.Theme.TopBarHeight),
            BackgroundColor3 = self.Theme.TopBarBackground,
            BorderSizePixel = 0,
            Active = true
        }
    )
    MakeDraggable(self.TopBar, self.MainWindow)

    local leftPaddingTB = self.Theme.Padding
    if self.HubName and self.HubName ~= "" then
        self.HubNameLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "HubNameLabel",
                Parent = self.TopBar,
                Size = UDim2.new(0, 0, 1, 0),
                AutomaticSize = Enum.AutomaticSize.X,
                Position = UDim2.new(0, leftPaddingTB, 0, 0),
                BackgroundTransparency = 1,
                Font = Enum.Font.SourceSansSemibold,
                Text = self.HubName,
                TextColor3 = self.Theme.TopBarText,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center
            }
        )
        RunService.Heartbeat:Wait()
        leftPaddingTB = leftPaddingTB + self.HubNameLabel.AbsoluteSize.X + self.Theme.Padding / 2
    end
    if self.ScriptName then
        local scriptNamePill =
            CreateInstance(
            "Frame",
            {
                Name = "ScriptNamePillFrame",
                Parent = self.TopBar,
                Size = UDim2.new(0, 0, 0, self.Theme.TopBarHeight * 0.60),
                Position = UDim2.new(0, leftPaddingTB, 0.5, -(self.Theme.TopBarHeight * 0.60) / 2),
                BackgroundColor3 = self.Theme.ScriptNamePillBackground,
                BorderSizePixel = 0,
                AutomaticSize = Enum.AutomaticSize.X
            }
        )
        CreateInstance(
            "UICorner",
            {CornerRadius = UDim.new(0, self.Theme.ScriptNamePillVCorners), Parent = scriptNamePill}
        )
        CreateInstance(
            "UIPadding",
            {
                Parent = scriptNamePill,
                PaddingLeft = UDim.new(0, self.Theme.ScriptNamePillHPadding),
                PaddingRight = UDim.new(0, self.Theme.ScriptNamePillHPadding)
            }
        )
        CreateInstance(
            "TextLabel",
            {
                Name = "ScriptNamePillText",
                Parent = scriptNamePill,
                Size = UDim2.new(0, 0, 1, 0),
                AutomaticSize = Enum.AutomaticSize.X,
                BackgroundTransparency = 1,
                Font = Enum.Font.SourceSansSemibold,
                Text = self.ScriptName,
                TextColor3 = self.Theme.ScriptNamePillText,
                TextSize = 13,
                TextYAlignment = Enum.TextYAlignment.Center
            }
        )
        RunService.Heartbeat:Wait()
        leftPaddingTB = leftPaddingTB + scriptNamePill.AbsoluteSize.X + self.Theme.Padding / 2
    end
    if self.Version then
        self.VersionLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "VersionLabel",
                Parent = self.TopBar,
                Size = UDim2.new(0, 0, 1, 0),
                AutomaticSize = Enum.AutomaticSize.X,
                Position = UDim2.new(0, leftPaddingTB, 0, 0),
                BackgroundTransparency = 1,
                Font = Enum.Font.SourceSans,
                Text = self.Version,
                TextColor3 = self.Theme.VersionText,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center
            }
        )
    end
    local buttonSizeTB = self.Theme.TopBarHeight * 0.7
    local buttonYPosTB = (self.Theme.TopBarHeight - buttonSizeTB) / 2
    local rightPaddingTB = self.Theme.Padding
    self.CloseButton =
        CreateInstance(
        "TextButton",
        {
            Name = "CloseButton",
            Parent = self.TopBar,
            Size = UDim2.new(0, buttonSizeTB, 0, buttonSizeTB),
            Position = UDim2.new(1, -(buttonSizeTB + rightPaddingTB), 0, buttonYPosTB),
            BackgroundColor3 = self.Theme.TopBarBackground,
            BackgroundTransparency = 0.8,
            Font = Enum.Font.SourceSansBold,
            Text = "X",
            TextColor3 = self.Theme.CloseButtonText,
            TextSize = 16,
            AutoButtonColor = false,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = self.CloseButton, CornerRadius = UDim.new(0, self.Theme.ButtonCornerRadius)})
    rightPaddingTB = rightPaddingTB + buttonSizeTB + self.Theme.Padding / 3

    self.MinimizeButton =
        CreateInstance(
        "TextButton",
        {
            Name = "MinimizeButton",
            Parent = self.TopBar,
            Size = UDim2.new(0, buttonSizeTB, 0, buttonSizeTB),
            Position = UDim2.new(1, -(buttonSizeTB + rightPaddingTB), 0, buttonYPosTB),
            BackgroundColor3 = self.Theme.TopBarBackground,
            BackgroundTransparency = 0.8,
            Font = Enum.Font.SourceSansBold,
            Text = "_",
            TextColor3 = self.Theme.MinimizeButtonText,
            TextSize = 16,
            AutoButtonColor = false,
            BorderSizePixel = 0
        }
    )
    CreateInstance(
        "UICorner",
        {Parent = self.MinimizeButton, CornerRadius = UDim.new(0, self.Theme.ButtonCornerRadius)}
    )

    self.MiniLogoButton = nil

    self.MinimizeButton.MouseButton1Click:Connect(
        function()
            AnimateElementVisibility(
                self.MainWindow,
                false,
                0.3,
                function()
                    if not self.MiniLogoButton or not self.MiniLogoButton.Parent then
                        self.MiniLogoButton =
                            CreateInstance(
                            "ImageButton",
                            {
                                Name = "MiniLogoButton",
                                Parent = self.ScreenGui,
                                Size = self.MiniLogoSize,
                                Position = self.MiniLogoPosition,
                                Image = self.MiniLogoImage,
                                ImageColor3 = self.Theme.MiniLogoColor,
                                BorderSizePixel = 0,
                                BackgroundTransparency = 0,
                                ImageTransparency = 0,
                                Visible = true,
                                ZIndex = self.ScreenGui.DisplayOrder + 5
                            }
                        )
                        CreateInstance(
                            "UICorner",
                            {
                                CornerRadius = UDim.new(0, self.Theme.CornerRadius),
                                Parent = self.MiniLogoButton
                            }
                        )
                        MakeDraggable(self.MiniLogoButton, self.MiniLogoButton)

                        self.MiniLogoButton.MouseButton1Click:Connect(
                            function()
                                self.MainWindow.Position = UDim2.new(0, finalMainWindowX, 0, finalMainWindowY)

                                AnimateElementVisibility(
                                    self.MainWindow,
                                    true,
                                    0.3,
                                    function()
                                        if self.MiniLogoButton and self.MiniLogoButton.Parent then
                                            self.MiniLogoButton.Visible = false
                                        end
                                    end
                                )
                            end
                        )
                    else
                        self.MiniLogoButton.Visible = true
                        self.MiniLogoButton.ImageTransparency = 0
                    end
                end
            )
        end
    )

    self.CloseButton.MouseButton1Click:Connect(
        function()
            if self.CloseAction == "destroy" then
                if self.ScreenGui and self.ScreenGui.Parent then
                    if self.GlobalTooltipFrame and self.GlobalTooltipFrame.Parent then
                        self.GlobalTooltipFrame:Destroy()
                    end
                    self.ScreenGui:Destroy()
                end
            else
                AnimateElementVisibility(self.MainWindow, false, 0.3)
            end
        end
    )

    self.LeftNavArea =
        CreateInstance(
        "Frame",
        {
            Name = "LeftNavArea",
            Parent = self.MainWindow,
            Size = UDim2.new(0, self.Theme.LeftNavWidth, 1, -self.Theme.TopBarHeight),
            Position = UDim2.new(0, 0, 0, self.Theme.TopBarHeight),
            BackgroundColor3 = self.Theme.LeftNavBackground,
            BorderSizePixel = 0
        }
    )
    self.CategoriesScroll =
        CreateInstance(
        "ScrollingFrame",
        {
            Name = "CategoriesScroll",
            Parent = self.LeftNavArea,
            Size = UDim2.new(1, 0, 1, -self.Theme.UserInfoHeight),
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundColor3 = self.Theme.LeftNavBackground,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 4,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        }
    )
    self.CategoriesListLayout =
        CreateInstance(
        "UIListLayout",
        {
            Parent = self.CategoriesScroll,
            FillDirection = Enum.FillDirection.Vertical,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 2)
        }
    )
    self.UserInfoArea =
        CreateInstance(
        "Frame",
        {
            Name = "UserInfoArea",
            Parent = self.LeftNavArea,
            Size = UDim2.new(1, 0, 0, self.Theme.UserInfoHeight),
            Position = UDim2.new(0, 0, 1, -self.Theme.UserInfoHeight),
            BackgroundColor3 = self.Theme.UserInfoBackground,
            BorderSizePixel = 0,
            ZIndex = 2
        }
    )
    CreateInstance(
        "Frame",
        {
            Name = "UserInfoTopSeparator",
            Parent = self.UserInfoArea,
            Size = UDim2.new(1, 0, 0, 1),
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundColor3 = self.Theme.SeparatorLineColor,
            BackgroundTransparency = 1,
            ZIndex = 3
        }
    )
    self.ContentArea =
        CreateInstance(
        "Frame",
        {
            Name = "ContentArea",
            Parent = self.MainWindow,
            Size = UDim2.new(1, -self.Theme.LeftNavWidth, 1, -self.Theme.TopBarHeight),
            Position = UDim2.new(0, self.Theme.LeftNavWidth, 0, self.Theme.TopBarHeight),
            BackgroundColor3 = self.Theme.ContentBackground,
            BackgroundTransparency = self.Theme.ContentTransparency or 0,
            BorderSizePixel = 0,
            ClipsDescendants = true
        }
    )

    local loadingLabel =
        CreateInstance(
        "TextLabel",
        {
            Name = "LoadingLabel",
            Parent = self.MainWindow,
            Size = UDim2.new(0.5, 0, 0, 50),
            Position = UDim2.new(0.25, 0, 0.5, -25),
            BackgroundTransparency = 1,
            Font = Enum.Font.SourceSansBold,
            Text = "Loading " .. self.HubName .. "...",
            TextColor3 = self.Theme.LoadingTextColor,
            TextSize = 18,
            Visible = true,
            ZIndex = (self.MainWindow and self.MainWindow.ZIndex or 1) + 10
        }
    )

    self.MainWindow.Position = UDim2.new(0, finalMainWindowX + 20, 0, finalMainWindowY)
    self.MainWindow.BackgroundTransparency = 1
    self.MainWindow.Visible = true

    local mainWindowTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local mainWindowPosGoal = {Position = UDim2.new(0, finalMainWindowX, 0, finalMainWindowY)}
    local targetMainWindowBgTrans = self.Theme.WindowBackgroundTransparency or 0
    local mainWindowBgGoal = {BackgroundTransparency = targetMainWindowBgTrans}

    local posTweenMain = TweenService:Create(self.MainWindow, mainWindowTweenInfo, mainWindowPosGoal)
    local bgTweenMain = TweenService:Create(self.MainWindow, mainWindowTweenInfo, mainWindowBgGoal)

    local allTweensDoneSignal = Instance.new("BindableEvent")
    local tweensToComplete = 0
    if posTweenMain then
        tweensToComplete = tweensToComplete + 1
    end
    if bgTweenMain then
        tweensToComplete = tweensToComplete + 1
    end

    local function onTweenCompleted()
        tweensToComplete = tweensToComplete - 1
        if tweensToComplete == 0 then
            allTweensDoneSignal:Fire()
        end
    end

    if posTweenMain then
        posTweenMain.Completed:Connect(onTweenCompleted)
        posTweenMain:Play()
    end
    if bgTweenMain then
        bgTweenMain.Completed:Connect(onTweenCompleted)
        bgTweenMain:Play()
    end

    if tweensToComplete > 0 then
        allTweensDoneSignal.Event:Wait()
    elseif tweensToComplete == 0 then
        task.wait(0.5)
    end
    allTweensDoneSignal:Destroy()

    if loadingLabel and loadingLabel.Parent then
        loadingLabel:Destroy()
    end
    self.IsLoading = false

    if self.ActiveSubTab and self.ActiveSubTab.ContentFrame then
        AnimateElementVisibility(
            self.ActiveSubTab.ContentFrame,
            true,
            0.01,
            function()
                if self.ActiveSubTab then
                    for _, controlApi in ipairs(self.ActiveSubTab.Controls) do
                        if controlApi.Gui and controlApi.Gui.Parent == self.ActiveSubTab.ContentFrame then
                            AnimateElementVisibility(controlApi.Gui, true, 0.1)
                            if controlApi.Type == "SectionContainer" then
                                if controlApi.Content and controlApi.Content.IsExpanded then
                                    controlApi.Content.ContentFrame.Visible = true
                                    for _, childControlApi in ipairs(controlApi.Content.Controls) do
                                        AnimateElementVisibility(childControlApi.Gui, true, 0.1)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        )
    end

    local function PopulateUserInfoArea(hubInstance)
        local userInfoArea = hubInstance.UserInfoArea
        if not userInfoArea then
            return
        end
        local theme = hubInstance.Theme
        local padding = theme.Padding / 2
        local userIconSize = theme.UserInfoHeight - (padding * 2) - 4
        RunService.Heartbeat:Wait()
        hubInstance.UserIcon =
            CreateInstance(
            "ImageLabel",
            {
                Name = "UserIcon",
                Parent = userInfoArea,
                Size = UDim2.new(0, userIconSize, 0, userIconSize),
                Position = UDim2.new(0, padding, 0.5, -userIconSize / 2),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Image = "rbxassetid://0",
                ImageColor3 = theme.LabelText,
                ScaleType = Enum.ScaleType.Fit
            }
        )
        CreateInstance(
            "UICorner",
            {Parent = hubInstance.UserIcon, CornerRadius = UDim.new(0, theme.ButtonCornerRadius)}
        )
        local s, c =
            pcall(
            function()
                return Players:GetUserThumbnailAsync(
                    LocalPlayer.UserId,
                    Enum.ThumbnailType.HeadShot,
                    Enum.ThumbnailSize.Size150x150
                )
            end
        )
        if s and c then
            hubInstance.UserIcon.Image = c
        end

        local textXOffset = padding + userIconSize + padding
        local textAvailableWidth = userInfoArea.AbsoluteSize.X - textXOffset - padding
        if textAvailableWidth <= 10 then
            textAvailableWidth = math.max(50, userInfoArea.AbsoluteSize.X * 0.6)
        end

        hubInstance.UserNameLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "UserNameLabel",
                Parent = userInfoArea,
                Size = UDim2.new(0, textAvailableWidth, 0, theme.UserInfoHeight * 0.45),
                Position = UDim2.new(0, textXOffset, 0, padding * 0.8),
                BackgroundTransparency = 1,
                Font = Enum.Font.SourceSansSemibold,
                Text = hubInstance.UserInfo.Name or "PlayerName",
                TextColor3 = theme.UserNameText,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Bottom
            }
        )
        hubInstance.UserTagLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "UserTagLabel",
                Parent = userInfoArea,
                Size = UDim2.new(0, textAvailableWidth, 0, theme.UserInfoHeight * 0.35),
                Position = UDim2.new(
                    0,
                    textXOffset,
                    0,
                    hubInstance.UserNameLabel.Position.Y.Offset + hubInstance.UserNameLabel.Size.Y.Offset + 1
                ),
                BackgroundTransparency = 1,
                Font = Enum.Font.SourceSans,
                Text = hubInstance.UserInfo.Tag or "#0000",
                TextColor3 = theme.UserTagText,
                TextSize = 11,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top
            }
        )
    end
    PopulateUserInfoArea(self)
    self:ApplyTheme(self.InitialTheme)
    return self
end

function TrxLib:CreateCategory(categoryName)
    local selfCategoryHub = self
    local category = {
        Name = categoryName,
        Hub = selfCategoryHub,
        SubTabs = {},
        IsExpanded = true, -- Default to expanded
        ContainerFrame = nil,
        HeaderButton = nil,
        SubTabsFrame = nil
    }
    category.ContainerFrame =
        CreateInstance(
        "Frame",
        {
            Name = categoryName .. "CategoryContainer",
            Parent = selfCategoryHub.CategoriesScroll,
            Size = UDim2.new(1, 0, 0, selfCategoryHub.Theme.CategoryHeaderHeight),
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            LayoutOrder = #selfCategoryHub.Categories + 1
        }
    )
    CreateInstance(
        "UIListLayout",
        {
            Parent = category.ContainerFrame,
            FillDirection = Enum.FillDirection.Vertical,
            SortOrder = Enum.SortOrder.LayoutOrder
        }
    )
    category.HeaderButton =
        CreateInstance(
        "TextButton",
        {
            Name = categoryName .. "Header",
            Parent = category.ContainerFrame,
            Size = UDim2.new(1, 0, 0, selfCategoryHub.Theme.CategoryHeaderHeight),
            BackgroundColor3 = selfCategoryHub.Theme.CategoryHeaderBackground,
            Text = "",
            AutoButtonColor = false,
            BorderSizePixel = 0,
            LayoutOrder = 1
        }
    )
    CreateInstance(
        "TextLabel",
        {
            Name = "CategoryNameLabel",
            Parent = category.HeaderButton,
            Size = UDim2.new(1, -(selfCategoryHub.Theme.Padding + 12 + selfCategoryHub.Theme.Padding / 2), 1, 0),
            Position = UDim2.new(0, selfCategoryHub.Theme.Padding, 0, 0),
            BackgroundTransparency = 1,
            Font = Enum.Font.SourceSansSemibold,
            Text = categoryName:upper(),
            TextColor3 = selfCategoryHub.Theme.CategoryHeaderText,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left
        }
    )
    local arrow =
        CreateInstance(
        "ImageLabel",
        {
            Name = "CategoryArrow",
            Parent = category.HeaderButton,
            Size = UDim2.new(0, 12, 0, 12),
            Position = UDim2.new(1, -(selfCategoryHub.Theme.Padding + 12), 0.5, -6),
            BackgroundTransparency = 1,
            Image = ARROW_ASSET_ID_OPEN, -- Assuming this is a downward pointing arrow
            ImageColor3 = selfCategoryHub.Theme.CategoryArrowColor,
            Rotation = category.IsExpanded and 0 or -90 -- Set initial rotation
        }
    )
    category.SubTabsFrame =
        CreateInstance(
        "Frame",
        {
            Name = categoryName .. "SubTabs",
            Parent = category.ContainerFrame,
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ClipsDescendants = true,
            Visible = category.IsExpanded,
            LayoutOrder = 2
        }
    )
    CreateInstance(
        "UIListLayout",
        {
            Parent = category.SubTabsFrame,
            FillDirection = Enum.FillDirection.Vertical,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 1)
        }
    )
    CreateInstance(
        "UIPadding",
        {
            Parent = category.SubTabsFrame,
            PaddingLeft = UDim.new(0, selfCategoryHub.Theme.Padding / 3),
            PaddingRight = UDim.new(0, selfCategoryHub.Theme.Padding / 3)
        }
    )
    category.HeaderButton.MouseButton1Click:Connect(
        function()
            category.IsExpanded = not category.IsExpanded
            category.SubTabsFrame.Visible = category.IsExpanded
            arrow.Rotation = category.IsExpanded and 0 or -90 -- Update rotation on click
        end
    )

    setmetatable(category, {__index = TrxLib.CategoryMethods})
    table.insert(selfCategoryHub.Categories, category)
    return category
end

TrxLib.SubTabMethods._CreateControlBase = function(
    self,
    labelText,
    descriptionText,
    rightPaneWidthFraction,
    rightPanePixelOffset)
    local hub = self.Hub
    rightPaneWidthFraction = rightPaneWidthFraction or 0.35
    rightPanePixelOffset = rightPanePixelOffset or 0

    local controlRow =
        CreateInstance(
        "Frame",
        {
            Name = "ControlRow_" .. (labelText or "Unnamed"):gsub("[^%w_]", ""), -- İsimde geçersiz karakterleri temizle
            Size = UDim2.new(1, 0, 0, hub.Theme.ControlRowMinHeight),
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        }
    )

    CreateInstance(
        "UIListLayout",
        {
            Parent = controlRow,
            FillDirection = Enum.FillDirection.Horizontal,
            VerticalAlignment = Enum.VerticalAlignment.Center, -- Ana satırın çocuklarını dikeyde ortala
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, hub.Theme.Padding / 2)
        }
    )

    local leftPane =
        CreateInstance(
        "Frame",
        {
            Name = "LeftPane",
            Parent = controlRow,
            LayoutOrder = 1,
            Size = UDim2.new(1 - rightPaneWidthFraction, -rightPanePixelOffset - (hub.Theme.Padding / 2), 0, 0), -- Yükseklik otomatik olacak
            AutomaticSize = Enum.AutomaticSize.Y, -- Yüksekliği içeriğe göre ayarla
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        }
    )
    CreateInstance(
        "UIListLayout",
        {
            Parent = leftPane,
            FillDirection = Enum.FillDirection.Vertical,
            Padding = UDim.new(0, 2), -- Etiket ve açıklama arası boşluk (gerekirse tema'dan alınabilir)
            SortOrder = Enum.SortOrder.LayoutOrder,
            VerticalAlignment = Enum.VerticalAlignment.Center -- Sol bölmedeki elemanları dikeyde ortala
        }
    )

    local controlLabel =
        CreateInstance(
        "TextLabel",
        {
            Name = "ControlLabel",
            Parent = leftPane,
            LayoutOrder = 1,
            Text = labelText or "",
            TextColor3 = hub.Theme.LabelText,
            Font = Enum.Font.SourceSansSemibold,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 18),
            AutomaticSize = Enum.AutomaticSize.Y,
            RichText = false -- <<< DÜZELTME: EKLENDİ
        }
    )

    if descriptionText and descriptionText ~= "" then
        CreateInstance(
            "TextLabel",
            {
                Name = "ControlDescription",
                Parent = leftPane,
                LayoutOrder = 2,
                Text = descriptionText,
                TextColor3 = hub.Theme.DescriptionText,
                Font = Enum.Font.SourceSans,
                TextSize = 11,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 14),
                AutomaticSize = Enum.AutomaticSize.Y,
                RichText = false -- <<< DÜZELTME: EKLENDİ
            }
        )
        controlLabel.TextYAlignment = Enum.TextYAlignment.Top
    else
        controlLabel.TextYAlignment = Enum.TextYAlignment.Center
    end

    local rightPane =
        CreateInstance(
        "Frame",
        {
            Name = "RightPane",
            Parent = controlRow,
            LayoutOrder = 2,
            Size = UDim2.new(rightPaneWidthFraction, rightPanePixelOffset, 0, hub.Theme.ControlHeight),
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        }
    )
    return controlRow, leftPane, rightPane
end

TrxLib.SubTabMethods.AddLabel = function(self, labelTextContent, descriptionTextContent, isTitle)
    local hub = self.Hub
    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelTextContent, descriptionTextContent, 0.01, 0)
    rightPane.Visible = false

    local mainLabel = leftPane:FindFirstChild("ControlLabel")
    if mainLabel then
        mainLabel.Font = isTitle and Enum.Font.SourceSansBold or Enum.Font.SourceSans
        mainLabel.TextSize = isTitle and 16 or 14
    end

    local api = {
        Gui = controlRow,
        Type = "Label",
        SetText = function(self, text) -- SELF EKLENDİ
            if mainLabel then
                -- Debug print'leri isteğe bağlı olarak kaldırabilirsiniz
                -- print("AddLabel -> SetText called. Type of text:", typeof(text), "Value:", text)
                if typeof(text) == "string" then
                    mainLabel.Text = text
                else
                    warn("TrxLib.AddLabel.SetText: Expected a string, got " .. typeof(text))
                end
            end
        end,
        SetDescription = function(self, desc) -- SELF EKLENDİ
            local descLabel = leftPane:FindFirstChild("ControlDescription")
            if descLabel then
                if typeof(desc) == "string" then
                    descLabel.Text = desc
                else
                    warn("TrxLib.AddLabel.SetDescription: Expected a string, got " .. typeof(desc))
                end
            end
        end
    }
    AddControlToSubTabAndIncrementCounter(self, controlRow, api) -- Buradaki 'self' AddLabel'ı çağıran SubTab veya Section'dır, api.SetText'teki self ile karıştırılmamalı.
    return api
end

TrxLib.SubTabMethods.AddButton = function(self, buttonTextContent, descriptionTextContent, callbackFunction)
    local hub = self.Hub
    local controlRow, leftPane, rightPane = self:_CreateControlBase(buttonTextContent, descriptionTextContent, 0.35)
    leftPane:FindFirstChild("ControlLabel").Text = ""
    if descriptionTextContent and descriptionTextContent ~= "" then
        leftPane:FindFirstChild("ControlDescription").Text = descriptionTextContent
    else
        local d = leftPane:FindFirstChild("ControlDescription")
        if d then
            d:Destroy()
        end
        leftPane:FindFirstChild("ControlLabel").Text = buttonTextContent
        leftPane:FindFirstChild("ControlLabel").TextYAlignment = Enum.TextYAlignment.Center
        leftPane.Size = UDim2.new(0.60, 0, 0, hub.Theme.ControlHeight)
        rightPane.Size = UDim2.new(0.35, 0, 0, hub.Theme.ControlHeight)
    end

    local buttonInstance =
        CreateInstance(
        "TextButton",
        {
            Name = "ActionButton",
            Parent = rightPane,
            Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight),
            Position = UDim2.new(0, 0, 0.5, -hub.Theme.ControlHeight / 2),
            BackgroundColor3 = hub.Theme.ButtonBackground,
            Font = Enum.Font.SourceSansSemibold,
            Text = buttonTextContent,
            TextColor3 = hub.Theme.ButtonText,
            TextSize = 14,
            BorderSizePixel = 0,
            AutoButtonColor = false
        }
    )
    CreateInstance("UICorner", {Parent = buttonInstance, CornerRadius = UDim.new(0, hub.Theme.ButtonCornerRadius)})

    buttonInstance.MouseEnter:Connect(
        function()
            buttonInstance.BackgroundColor3 = hub.Theme.ButtonHoverBackground
        end
    )
    buttonInstance.MouseLeave:Connect(
        function()
            buttonInstance.BackgroundColor3 = hub.Theme.ButtonBackground
        end
    )
    if callbackFunction then
        buttonInstance.MouseButton1Click:Connect(
            function()
                task.spawn(callbackFunction)
            end
        )
    end

    local api = {
        Gui = controlRow,
        Type = "Button",
        SetText = function(self, text) -- SELF EKLENDİ
            if typeof(text) == "string" then
                buttonInstance.Text = text
            else
                warn("TrxLib.AddButton.SetText: Expected a string, got " .. typeof(text))
            end
        end
    }
    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddToggle = function(self, labelTextContent, descriptionTextContent, initialValue, callbackFunction)
    local hub = self.Hub
    local currentValue = initialValue or false
    local controlRow, leftPane, rightPane =
        self:_CreateControlBase(labelTextContent, descriptionTextContent, 0.15, hub.Theme.CheckboxSize)
    rightPane.Size = UDim2.new(0, hub.Theme.CheckboxSize, 0, hub.Theme.CheckboxSize)
    rightPane.Position = UDim2.new(1, -hub.Theme.CheckboxSize - hub.Theme.Padding, 0.5, -hub.Theme.CheckboxSize / 2)

    local checkbox =
        CreateInstance(
        "TextButton",
        {
            Name = "CheckboxButtonArea",
            Parent = rightPane,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundColor3 = hub.Theme.ToggleCheckboxBackground,
            Text = "",
            BorderSizePixel = 0,
            AutoButtonColor = false
        }
    )
    CreateInstance("UICorner", {Parent = checkbox, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius)})

    local checkMark =
        CreateInstance(
        "Frame",
        {
            Name = "CheckMarkVisualFill",
            Parent = checkbox,
            Size = UDim2.new(1, -6, 1, -6),
            Position = UDim2.new(0, 3, 0, 3),
            BackgroundColor3 = hub.Theme.ToggleCheckboxFilledColor,
            BorderSizePixel = 0,
            BackgroundTransparency = currentValue and 0 or 1
        }
    )
    CreateInstance(
        "UICorner",
        {Parent = checkMark, CornerRadius = UDim.new(0, math.max(1, hub.Theme.InputCornerRadius - 3))}
    )

    local function updateVisualState()
        if checkMark and checkMark.Parent then
            checkMark.BackgroundTransparency = currentValue and 0 or 1
        end
    end
    updateVisualState()

    local api = {
        GetValue = function(self) -- SELF EKLENDİ
            return currentValue
        end,
        SetValue = function(self, val) -- SELF EKLENDİ
            currentValue = (val == true) -- Değeri boolean olarak doğrula
            updateVisualState()
            if callbackFunction then
                task.spawn(callbackFunction, currentValue)
            end
        end,
        Gui = controlRow,
        Type = "Toggle",
        Hub = hub
    }
    setmetatable(api, {__index = TrxLib.SubTabMethods}) -- Bu setmetatable kalabilir, sorun __index değil.

    checkbox.MouseButton1Click:Connect(
        function()
            currentValue = not currentValue
            updateVisualState()
            if callbackFunction then
                task.spawn(callbackFunction, currentValue)
            end
        end
    )

    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddTextInput = function(
    self,
    labelTextContent,
    descriptionTextContent,
    placeholderTextContent,
    initialValue,
    callbackOnAnyFocusLost)
    local hub = self.Hub
    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelTextContent, descriptionTextContent, 0.4)

    local textbox =
        CreateInstance(
        "TextBox",
        {
            Name = "InputTextBox",
            Parent = rightPane,
            Position = UDim2.new(0, 0, 0.5, -hub.Theme.ControlHeight / 2),
            Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight),
            BackgroundColor3 = hub.Theme.InputBackground,
            Font = Enum.Font.SourceSans,
            Text = initialValue or "",
            PlaceholderText = placeholderTextContent or "...",
            TextColor3 = hub.Theme.InputText,
            PlaceholderColor3 = hub.Theme.InputPlaceholder,
            TextSize = 14,
            ClearTextOnFocus = false,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = textbox, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius)})
    local api = {
        GetValue = function(self) -- SELF EKLENDİ
            return textbox.Text
        end,
        SetValue = function(self, text) -- SELF EKLENDİ
            if typeof(text) == "string" then
                textbox.Text = text
            else
                warn("TrxLib.AddTextInput.SetValue: Expected a string, got " .. typeof(text))
            end
        end,
        Gui = controlRow,
        Type = "TextInput",
        _TextBox = textbox
    }
    if callbackOnAnyFocusLost then
        textbox.FocusLost:Connect(
            function(enterPressed)
                if enterPressed or UserInputService:GetFocusedTextBox() ~= textbox then
                    task.spawn(callbackOnAnyFocusLost, textbox.Text)
                end
            end
        )
    end
    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddSlider = function(
    self,
    labelText,
    descriptionText,
    minValue,
    maxValue,
    initialValue,
    stepValue,
    callback)
    local hub = self.Hub
    minValue = minValue or 0
    maxValue = maxValue or 100
    local stepValue = stepValue or 1

    local function snapToStep(value)
        if typeof(stepValue) == "number" and stepValue > 0 then
            return math.floor(value / stepValue + 0.5) * stepValue
        end
        return value
    end

    initialValue = math.clamp(initialValue or minValue, minValue, maxValue)
    initialValue = snapToStep(initialValue)
    local currentValue = initialValue

    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelText, descriptionText, 0.55)
    leftPane:FindFirstChild("ControlLabel").Text = labelText

    local sliderItselfFrame =
        CreateInstance(
        "Frame",
        {
            Name = "SliderItselfFrame",
            Parent = rightPane,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0.5, -hub.Theme.ControlHeight / 2),
            Size = UDim2.new(1, -(hub.Theme.ControlHeight * 1.2 + 5), 0, hub.Theme.ControlHeight)
        }
    )
    local track =
        CreateInstance(
        "Frame",
        {
            Name = "Track",
            Parent = sliderItselfFrame,
            Size = UDim2.new(1, 0, 0, 6),
            Position = UDim2.new(0, 0, 0.5, -3),
            BackgroundColor3 = hub.Theme.SliderTrack,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = track, CornerRadius = UDim.new(1, 0)})
    local progressFill =
        CreateInstance(
        "Frame",
        {
            Name = "SliderProgressFill",
            Parent = track,
            Size = UDim2.new(
                (maxValue - minValue == 0) and 0 or (currentValue - minValue) / (maxValue - minValue),
                0,
                1,
                0
            ),
            BackgroundColor3 = hub.Theme.SliderProgress,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = progressFill, CornerRadius = UDim.new(1, 0)})
    local thumb =
        CreateInstance(
        "ImageLabel",
        {
            Name = "Thumb",
            Parent = sliderItselfFrame,
            Size = UDim2.new(0, 12, 0, 18),
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(
                (maxValue - minValue == 0) and 0 or (currentValue - minValue) / (maxValue - minValue),
                0,
                0.5,
                0
            ),
            BackgroundColor3 = hub.Theme.SliderThumb,
            ZIndex = 2,
            BackgroundTransparency = 0,
            BorderSizePixel = 0,
            Image = ""
        }
    )
    CreateInstance("UICorner", {Parent = thumb, CornerRadius = UDim.new(0, hub.Theme.ButtonCornerRadius)})

    local valueInput =
        CreateInstance(
        "TextBox",
        {
            Name = "SliderValueInput",
            Parent = rightPane,
            Size = UDim2.new(0, hub.Theme.ControlHeight * 1.2, 0, hub.Theme.ControlHeight - 2),
            Position = UDim2.new(1, -(hub.Theme.ControlHeight * 1.2), 0.5, -(hub.Theme.ControlHeight - 2) / 2),
            BackgroundColor3 = hub.Theme.SliderInputBackground,
            BorderSizePixel = 0,
            Font = Enum.Font.SourceSans,
            Text = tostring(math.floor(currentValue)),
            TextColor3 = hub.Theme.InputText,
            TextSize = 11,
            ClearTextOnFocus = false,
            TextXAlignment = Enum.TextXAlignment.Center
        }
    )
    CreateInstance(
        "UICorner",
        {Parent = valueInput, CornerRadius = UDim.new(0, math.max(1, hub.Theme.InputCornerRadius - 1))}
    )

    local api
    local events = {}
    local function fireEvent(eventName, ...)
        if events[eventName] then
            for _, cb in ipairs(events[eventName]) do
                task.spawn(cb, ...)
            end
        end
    end

    local function updateSlider(val, fromInput, fromDrag)
        local previousValue = currentValue
        val = tonumber(val)
        if val == nil or val ~= val then
            val = previousValue
        end

        val = snapToStep(val)
        currentValue = math.clamp(val, minValue, maxValue)

        local perc = (maxValue - minValue == 0) and 0 or (currentValue - minValue) / (maxValue - minValue)

        if thumb and thumb.Parent then
            thumb.Position = UDim2.new(perc, 0, 0.5, 0)
        end
        if progressFill and progressFill.Parent then
            progressFill.Size = UDim2.new(perc, 0, 1, 0)
        end

        if not fromInput and valueInput and valueInput.Parent then
            valueInput.Text = tostring(math.floor(currentValue))
        end

        if previousValue ~= currentValue then
            if callback then
                task.spawn(callback, currentValue)
            end
            fireEvent("OnValueChanged", currentValue)
        end
    end

    valueInput.FocusLost:Connect(
        function(enterPressed)
            fireEvent("OnBlur")
            if enterPressed or UserInputService:GetFocusedTextBox() ~= valueInput then
                local numVal = tonumber(valueInput.Text)
                if numVal ~= nil and numVal == numVal then
                    updateSlider(numVal, true, false)
                else
                    valueInput.Text = tostring(math.floor(currentValue))
                end
            end
        end
    )
    valueInput.Focused:Connect(
        function()
            fireEvent("OnFocus")
        end
    )

    api = {
        Gui = controlRow,
        Type = "Slider",
        IsEnabled = true,
        GetValue = function(self)
            return currentValue
        end,
        SetValue = function(self, val)
            if not self.IsEnabled then
                return
            end
            if typeof(val) == "number" then
                updateSlider(val, false, false)
            else
                warn("TrxLib.AddSlider.SetValue: Expected a number, got " .. typeof(val))
            end
        end,
        SetEnabled = function(self, enabled)
            self.IsEnabled = enabled == true
            controlRow.Visible = self.IsEnabled
        end,
        SetVisible = function(self, visible)
            AnimateElementVisibility(controlRow, visible == true, 0.2)
        end,
        ConnectEvent = function(self, eventName, cb)
            if not events[eventName] then
                events[eventName] = {}
            end
            table.insert(events[eventName], cb)
        end
    }

    local dragging = false
    local inputBeganConn, inputEndedConn, renderSteppedConn

    inputBeganConn =
        thumb.InputBegan:Connect(
        function(i)
            if not api.IsEnabled then
                return
            end
            if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                fireEvent("OnFocus")
            end
        end
    )

    inputEndedConn =
        UserInputService.InputEnded:Connect(
        function(i)
            if not api.IsEnabled then
                return
            end
            if
                (i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch) and
                    dragging
             then
                dragging = false
                updateSlider(currentValue, false, true)
                fireEvent("OnBlur")
            end
        end
    )

    renderSteppedConn =
        RunService.RenderStepped:Connect(
        function()
            if not api.IsEnabled then
                return
            end
            if not controlRow or not controlRow.Parent then
                if renderSteppedConn then
                    renderSteppedConn:Disconnect()
                end
                if inputBeganConn then
                    inputBeganConn:Disconnect()
                end
                return
            end
            if dragging and track and track.Parent then
                local mPos = UserInputService:GetMouseLocation()
                if UserInputService.TouchEnabled and #UserInputService:GetTouchPositions() > 0 then
                    mPos = UserInputService:GetTouchPositions()[1]
                end
                if not mPos then
                    return
                end

                local relX = mPos.X - track.AbsolutePosition.X
                local perc = math.clamp(relX / track.AbsoluteSize.X, 0, 1)
                updateSlider(minValue + (maxValue - minValue) * perc, false, true)
            end
        end
    )

    api:SetValue(initialValue)
    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddDropdown = function(
    self,
    labelText,
    descriptionText,
    itemsArray,
    initialValueOrValues,
    callbackFunction,
    options)
    local hub = self.Hub
    options = options or {}
    local isMultiSelect = options.MultiSelect or false
    local searchableThreshold = options.SearchableThreshold or 10
    local itemIconSize = options.ItemIconSize or UDim2.new(0, 16, 0, 16)
    local itemIconPadding = options.ItemIconPadding or 4

    local function getItemText(item)
        if typeof(item) == "table" and item.Text then
            return tostring(item.Text)
        end
        return tostring(item)
    end

    local function getItemIcon(item)
        if typeof(item) == "table" and item.Icon then
            return tostring(item.Icon)
        end
        return nil
    end

    local function itemToStringForComparison(item)
        return string.lower(getItemText(item))
    end

    itemsArray = itemsArray or {"(No Items)"}
    if #itemsArray == 0 then
        table.insert(itemsArray, "(No Items)")
    end

    local originalItemsArray = table.clone(itemsArray)
    local filteredItemsArray = table.clone(itemsArray)
    local currentSingleItem = nil
    local currentSelectedItems = {}

    local hasAnyIcon = false
    for _, item_in_arr in ipairs(originalItemsArray) do
        if getItemIcon(item_in_arr) then
            hasAnyIcon = true
            break
        end
    end

    local function initializeSelections(initVals)
        local currentInitialValue = initVals or initialValueOrValues
        if isMultiSelect then
            currentSelectedItems = {}
            if type(currentInitialValue) == "table" then
                for _, val_arg in ipairs(currentInitialValue) do
                    local val_arg_text = getItemText(val_arg)
                    for _, orig_item in ipairs(originalItemsArray) do
                        if getItemText(orig_item) == val_arg_text then
                            currentSelectedItems[orig_item] = true
                            break
                        end
                    end
                end
            elseif currentInitialValue ~= nil then
                local initialValText = getItemText(currentInitialValue)
                for _, orig_item in ipairs(originalItemsArray) do
                    if getItemText(orig_item) == initialValText then
                        currentSelectedItems[orig_item] = true
                        break
                    end
                end
            end
        else
            currentSingleItem = nil
            if currentInitialValue ~= nil then
                local initialValText = getItemText(currentInitialValue)
                for _, orig_item in ipairs(originalItemsArray) do
                    if getItemText(orig_item) == initialValText then
                        currentSingleItem = orig_item
                        break
                    end
                end
            end
            if currentSingleItem == nil then
                currentSingleItem =
                    (#originalItemsArray > 0) and originalItemsArray[1] or (options.NoSelectionTextSingle or "Select")
            end
        end
    end
    initializeSelections(initialValueOrValues)

    if #originalItemsArray == 0 then
        local emptyMsg = options.EmptyListMessage or " (List Empty) "
        local foundEmpty = false
        for _, item in ipairs(originalItemsArray) do
            if getItemText(item) == emptyMsg then
                foundEmpty = true
                break
            end
        end
        if not foundEmpty then
            table.insert(itemsArray, emptyMsg)
            table.insert(originalItemsArray, emptyMsg)
            table.insert(filteredItemsArray, emptyMsg)
        end
        if not isMultiSelect then
            currentSingleItem = (#originalItemsArray > 0) and originalItemsArray[1] or nil
        end
    end

    local isOpen = false
    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelText, descriptionText, 0.45)

    local mainBtn =
        CreateInstance(
        "TextButton",
        {
            Name = "MainButton_" .. (labelText or "Dropdown"):gsub("[^%w_]", ""),
            Parent = rightPane,
            BackgroundColor3 = hub.Theme.DropdownButton,
            Position = UDim2.new(0, 0, 0.5, -hub.Theme.ControlHeight / 2),
            Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight),
            Font = Enum.Font.SourceSans,
            TextColor3 = hub.Theme.ButtonText,
            TextSize = 13,
            AutoButtonColor = false,
            BorderSizePixel = 0,
            TextTruncate = Enum.TextTruncate.AtEnd,
            ClipsDescendants = true
        }
    )
    CreateInstance("UICorner", {Parent = mainBtn, CornerRadius = UDim.new(0, hub.Theme.ButtonCornerRadius)})

    local function updateMainBtnText()
        if not mainBtn or not mainBtn.Parent then
            return
        end
        local textToShow
        if isMultiSelect then
            local selectedArrDisplay = {}
            for _, item_orig in ipairs(originalItemsArray) do
                if currentSelectedItems[item_orig] then
                    table.insert(selectedArrDisplay, getItemText(item_orig))
                end
            end

            if #selectedArrDisplay == 0 then
                textToShow = options.NoSelectionTextMulti or "No selected items"
            elseif #selectedArrDisplay == 1 then
                textToShow = selectedArrDisplay[1]
            else
                local concatenatedText = table.concat(selectedArrDisplay, ", ")
                local availableWidth = mainBtn.AbsoluteSize.X - 30
                if availableWidth <= 0 then
                    availableWidth = 100
                end
                local textSizeVectorForCalc =
                    Vector2.new(
                    availableWidth,
                    mainBtn.AbsoluteSize.Y > 0 and mainBtn.AbsoluteSize.Y or hub.Theme.ControlHeight
                )
                local textSize =
                    TextService:GetTextSize(concatenatedText, mainBtn.TextSize, mainBtn.Font, textSizeVectorForCalc)

                if textSize.X < availableWidth and #selectedArrDisplay <= (options.MaxItemsInButtonTextMulti or 2) then
                    textToShow = concatenatedText
                else
                    textToShow = #selectedArrDisplay .. (options.ItemsSelectedTextMulti or " item(s) selected")
                end
            end
        else
            textToShow =
                (currentSingleItem and getItemText(currentSingleItem) or (options.NoSelectionTextSingle or "Select"))
        end
        mainBtn.Text = textToShow .. " ▼"
    end
    updateMainBtnText()

    local mainFrameForDropdown = nil
    local listFrameInstance = nil
    local searchBoxInstance = nil
    local apiRef = {}
    local listLayout = nil
    local dropdownListPositionUpdaterConnection = nil

    local function closeDropdownMenu()
        if mainFrameForDropdown and mainFrameForDropdown.Parent then
            mainFrameForDropdown:Destroy()
            mainFrameForDropdown = nil
        end
        listFrameInstance = nil
        searchBoxInstance = nil
        isOpen = false
        if dropdownListPositionUpdaterConnection then
            dropdownListPositionUpdaterConnection:Disconnect()
            dropdownListPositionUpdaterConnection = nil
        end
    end

    local function populateListItems(parentFrame, itemsToDisplay)
        for _, child in ipairs(parentFrame:GetChildren()) do
            if (child:IsA("TextButton") and child.Name:match("^ItemButton_")) or child.Name == "NoResultsLabel" then
                child:Destroy()
            end
        end

        if not itemsToDisplay or #itemsToDisplay == 0 then
            CreateInstance(
                "TextLabel",
                {
                    Name = "NoResultsLabel",
                    Parent = parentFrame,
                    Text = options.NoResultsMessage or " (Not Found) ",
                    Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight - 6),
                    TextColor3 = hub.Theme.InputPlaceholder,
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    LayoutOrder = 1,
                    RichText = false
                }
            )
            return
        end

        for i, item_in_list in ipairs(itemsToDisplay) do
            local itemText = getItemText(item_in_list)
            local currentItemIcon = getItemIcon(item_in_list)
            local itemIsSelected =
                isMultiSelect and (currentSelectedItems[item_in_list] or false) or (item_in_list == currentSingleItem)

            local itemBtn =
                CreateInstance(
                "TextButton",
                {
                    Name = "ItemButton_" .. itemText:gsub("[^%w_]", "") .. "_" .. i,
                    Parent = parentFrame,
                    LayoutOrder = i,
                    Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight - 4),
                    Text = "",
                    BackgroundColor3 = itemIsSelected and
                        (isMultiSelect and hub.Theme.DropdownMultiItemSelectedBg or hub.Theme.DropdownItemHover) or
                        hub.Theme.DropdownBackground,
                    BorderSizePixel = 0,
                    AutoButtonColor = false
                }
            )
            CreateInstance(
                "UICorner",
                {Parent = itemBtn, CornerRadius = UDim.new(0, hub.Theme.DropdownItemCornerRadius)}
            )

            local itemBtnLayout =
                CreateInstance(
                "UIListLayout",
                {
                    Parent = itemBtn,
                    FillDirection = Enum.FillDirection.Horizontal,
                    VerticalAlignment = Enum.VerticalAlignment.Center,
                    Padding = UDim.new(0, itemIconPadding)
                }
            )
            CreateInstance(
                "UIPadding",
                {
                    Parent = itemBtn,
                    PaddingLeft = UDim.new(0, hub.Theme.Padding / 2),
                    PaddingRight = UDim.new(0, hub.Theme.Padding / 2)
                }
            )

            if hasAnyIcon then
                local iconImage =
                    CreateInstance(
                    "ImageLabel",
                    {
                        Name = "ItemIcon",
                        Parent = itemBtn,
                        Size = itemIconSize,
                        Image = currentItemIcon or "",
                        ImageTransparency = currentItemIcon and 0 or 1,
                        BackgroundTransparency = 1,
                        LayoutOrder = 1
                    }
                )
            end

            local itemLabelInstance =
                CreateInstance(
                "TextLabel",
                {
                    Name = "ItemLabel",
                    Parent = itemBtn,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Text = itemText,
                    TextColor3 = itemIsSelected and
                        (isMultiSelect and hub.Theme.SubTabActiveText or hub.Theme.ButtonText) or
                        hub.Theme.ButtonText,
                    Font = Enum.Font.SourceSans,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Center,
                    LayoutOrder = hasAnyIcon and 2 or 1,
                    RichText = false,
                    TextTruncate = Enum.TextTruncate.AtEnd,
                    ClipsDescendants = true
                }
            )

            if hasAnyIcon then
                itemLabelInstance.Size =
                    UDim2.new(
                    1,
                    -(itemIconSize.X.Offset + itemIconPadding +
                        (itemBtn.UIPadding.PaddingLeft.Offset + itemBtn.UIPadding.PaddingRight.Offset)),
                    1,
                    0
                )
                itemLabelInstance.AutomaticSize = Enum.AutomaticSize.None
            else
                itemLabelInstance.Size =
                    UDim2.new(1, -(itemBtn.UIPadding.PaddingLeft.Offset + itemBtn.UIPadding.PaddingRight.Offset), 1, 0)
                itemLabelInstance.AutomaticSize = Enum.AutomaticSize.None
                itemBtnLayout.Padding = UDim.new(0, 0) -- İkon yoksa metin ile buton kenarı arasında boşluk olmasın (iç padding'ler hariç)
                itemLabelInstance.TextXAlignment = Enum.TextXAlignment.Center -- İkon yoksa ortala
            end

            itemBtn.MouseEnter:Connect(
                function()
                    if not (isMultiSelect and currentSelectedItems[item_in_list]) then
                        itemBtn.BackgroundColor3 = hub.Theme.DropdownItemHover
                    end
                end
            )
            itemBtn.MouseLeave:Connect(
                function()
                    if not (isMultiSelect and currentSelectedItems[item_in_list]) then
                        itemBtn.BackgroundColor3 =
                            (item_in_list == currentSingleItem and not isMultiSelect) and hub.Theme.DropdownItemHover or
                            hub.Theme.DropdownBackground
                    end
                end
            )
            itemBtn.MouseButton1Click:Connect(
                function()
                    if isMultiSelect then
                        currentSelectedItems[item_in_list] = not currentSelectedItems[item_in_list]
                        itemBtn.BackgroundColor3 =
                            currentSelectedItems[item_in_list] and hub.Theme.DropdownMultiItemSelectedBg or
                            hub.Theme.DropdownBackground
                        itemLabelInstance.TextColor3 =
                            currentSelectedItems[item_in_list] and hub.Theme.SubTabActiveText or hub.Theme.ButtonText
                        updateMainBtnText()
                        if callbackFunction then
                            local selectedArrForCallback = {}
                            for k_item, v_selected in pairs(currentSelectedItems) do
                                if v_selected then
                                    table.insert(selectedArrForCallback, k_item)
                                end
                            end
                            task.spawn(callbackFunction, selectedArrForCallback)
                        end
                    else
                        currentSingleItem = item_in_list
                        updateMainBtnText()
                        closeDropdownMenu()
                        hub:_ManageDropdownState(apiRef, false)
                        if callbackFunction then
                            task.spawn(callbackFunction, currentSingleItem)
                        end
                    end
                end
            )
        end
    end

    local function updateCanvasAndFrameSize()
        if
            not listFrameInstance or not listFrameInstance.Parent or not mainFrameForDropdown or
                not mainFrameForDropdown.Parent or
                not listLayout
         then
            return
        end
        listFrameInstance.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
        local searchBoxHeightWithPadding = 0
        if searchBoxInstance and searchBoxInstance.Parent then
            searchBoxHeightWithPadding = searchBoxInstance.Size.Y.Offset
            if mainFrameForDropdown.UIListLayout.Padding.Offset > 0 then
                searchBoxHeightWithPadding =
                    searchBoxHeightWithPadding + mainFrameForDropdown.UIListLayout.Padding.Offset
            end
        end
        local listContentHeight = listLayout.AbsoluteContentSize.Y
        local maxVisibleItems = options.MaxVisibleItems or 6
        local singleItemHeight = hub.Theme.ControlHeight - 4
        local scrollbarCompensation =
            (#filteredItemsArray > maxVisibleItems and listFrameInstance.ScrollBarThickness > 0) and
            listFrameInstance.ScrollBarThickness or
            0
        local currentVisibleItems = math.min(#filteredItemsArray, maxVisibleItems)
        local listLayoutPaddingTotal =
            (currentVisibleItems > 0) and listLayout.Padding.Offset * math.max(0, currentVisibleItems - 1) or 0

        local maxListFrameHeight =
            (singleItemHeight * currentVisibleItems) + listLayoutPaddingTotal + scrollbarCompensation
        if #filteredItemsArray == 0 then
            maxListFrameHeight = singleItemHeight
        end

        local actualListFrameHeight = math.min(listContentHeight, maxListFrameHeight)
        if listContentHeight == 0 and #filteredItemsArray == 0 then
            actualListFrameHeight = singleItemHeight
        end
        listFrameInstance.Size = UDim2.new(1, 0, 0, actualListFrameHeight)
        local mainFramePaddingVertical =
            mainFrameForDropdown.UIPadding.PaddingTop.Offset + mainFrameForDropdown.UIPadding.PaddingBottom.Offset
        local totalDropdownHeight = searchBoxHeightWithPadding + actualListFrameHeight + mainFramePaddingVertical
        mainFrameForDropdown.Size = UDim2.new(0, mainBtn.AbsoluteSize.X, 0, totalDropdownHeight)
        local mainBtnAbsPos = mainBtn.AbsolutePosition
        local screenHeight = hub.ScreenGui.AbsoluteSize.Y
        local newYPos = mainBtnAbsPos.Y + mainBtn.AbsoluteSize.Y + 2
        if newYPos + totalDropdownHeight > screenHeight and mainBtnAbsPos.Y - totalDropdownHeight - 2 >= 0 then
            newYPos = mainBtnAbsPos.Y - totalDropdownHeight - 2
        end
        newYPos = math.max(0, math.min(newYPos, screenHeight - totalDropdownHeight))
        mainFrameForDropdown.Position = UDim2.fromOffset(mainBtnAbsPos.X, newYPos)
    end

    local function filterItems(searchText)
        searchText = string.lower(searchText or "")
        filteredItemsArray = {}
        for _, item_orig in ipairs(originalItemsArray) do
            if searchText == "" or string.find(itemToStringForComparison(item_orig), searchText, 1, true) then
                table.insert(filteredItemsArray, item_orig)
            end
        end
        if listFrameInstance then
            populateListItems(listFrameInstance, filteredItemsArray)
            task.defer(updateCanvasAndFrameSize)
        end
    end

    local function openDropdownMenu()
        if isOpen then
            closeDropdownMenu()
        end
        hub:_ManageDropdownState(apiRef, true)
        mainFrameForDropdown =
            CreateInstance(
            "Frame",
            {
                Name = "DropdownMainFrame_" .. (labelText or "DefaultLabel"):gsub("[^%w_]", ""),
                Parent = hub.ScreenGui,
                BackgroundColor3 = hub.Theme.DropdownBackground,
                BorderSizePixel = 0,
                ZIndex = hub.ScreenGui.DisplayOrder + 20,
                ClipsDescendants = true,
                Visible = false
            }
        )
        CreateInstance(
            "UICorner",
            {Parent = mainFrameForDropdown, CornerRadius = UDim.new(0, hub.Theme.DropdownItemCornerRadius)}
        )
        local mainFrameLayout =
            CreateInstance(
            "UIListLayout",
            {
                Parent = mainFrameForDropdown,
                FillDirection = Enum.FillDirection.Vertical,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                Padding = UDim.new(0, 2),
                SortOrder = Enum.SortOrder.LayoutOrder
            }
        )
        CreateInstance(
            "UIPadding",
            {
                Parent = mainFrameForDropdown,
                PaddingTop = UDim.new(0, 3),
                PaddingBottom = UDim.new(0, 3),
                PaddingLeft = UDim.new(0, 3),
                PaddingRight = UDim.new(0, 3)
            }
        )
        if #originalItemsArray >= searchableThreshold then
            searchBoxInstance =
                CreateInstance(
                "TextBox",
                {
                    Name = "SearchBox",
                    Parent = mainFrameForDropdown,
                    Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight - 10),
                    BackgroundColor3 = hub.Theme.InputBackground,
                    TextColor3 = hub.Theme.InputText,
                    PlaceholderText = "Search...",
                    PlaceholderColor3 = hub.Theme.InputPlaceholder,
                    Font = Enum.Font.SourceSans,
                    Text = "",
                    TextSize = 12,
                    ClearTextOnFocus = false,
                    BorderSizePixel = 0,
                    LayoutOrder = 1
                }
            )
            CreateInstance(
                "UICorner",
                {Parent = searchBoxInstance, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius - 1)}
            )
            searchBoxInstance:GetPropertyChangedSignal("Text"):Connect(
                function()
                    filterItems(searchBoxInstance.Text)
                end
            )
        end
        listFrameInstance =
            CreateInstance(
            "ScrollingFrame",
            {
                Name = "DropdownList_" .. (isMultiSelect and "Multi" or "Single"),
                Parent = mainFrameForDropdown,
                BackgroundTransparency = 1,
                Visible = true,
                BorderSizePixel = 0,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = hub.Theme.ScrollBarThickness or 5,
                ScrollBarImageColor3 = hub.Theme.ScrollBarColor or Color3.fromRGB(100, 100, 100),
                Size = UDim2.new(1, 0, 0, 10),
                LayoutOrder = 2
            }
        )
        listLayout =
            CreateInstance(
            "UIListLayout",
            {Parent = listFrameInstance, Padding = UDim.new(0, 1), SortOrder = Enum.SortOrder.LayoutOrder}
        )
        filterItems(searchBoxInstance and searchBoxInstance.Text or "")
        task.defer(
            function()
                if not mainFrameForDropdown or not mainFrameForDropdown.Parent then
                    return
                end
                updateCanvasAndFrameSize()
                mainFrameForDropdown.Visible = true
                if searchBoxInstance and UserInputService.KeyboardEnabled then
                    searchBoxInstance:CaptureFocus()
                end
                if dropdownListPositionUpdaterConnection then
                    dropdownListPositionUpdaterConnection:Disconnect()
                end
                dropdownListPositionUpdaterConnection =
                    RunService.RenderStepped:Connect(
                    function()
                        if
                            not isOpen or not mainFrameForDropdown or not mainFrameForDropdown.Parent or not mainBtn or
                                not mainBtn.Parent
                         then
                            if dropdownListPositionUpdaterConnection then
                                dropdownListPositionUpdaterConnection:Disconnect()
                                dropdownListPositionUpdaterConnection = nil
                            end
                            return
                        end
                        local mainBtnAbsPos = mainBtn.AbsolutePosition
                        local mainBtnAbsSize = mainBtn.AbsoluteSize
                        local dropdownFrameSize = mainFrameForDropdown.AbsoluteSize
                        local screenHeight = hub.ScreenGui.AbsoluteSize.Y
                        local newYPos = mainBtnAbsPos.Y + mainBtnAbsSize.Y + 2
                        if
                            newYPos + dropdownFrameSize.Y > screenHeight and
                                mainBtnAbsPos.Y - dropdownFrameSize.Y - 2 >= 0
                         then
                            newYPos = mainBtnAbsPos.Y - dropdownFrameSize.Y - 2
                        end
                        newYPos = math.max(0, math.min(newYPos, screenHeight - dropdownFrameSize.Y))
                        mainFrameForDropdown.Position = UDim2.fromOffset(mainBtnAbsPos.X, newYPos)
                    end
                )
            end
        )
        isOpen = true
    end

    apiRef.IsEnabled = true
    apiRef.IsOpen = function(self)
        return isOpen
    end
    apiRef.Close = function(self)
        if not self.IsEnabled then
            return
        end
        closeDropdownMenu()
        hub:_ManageDropdownState(apiRef, false)
    end
    apiRef.GetValue = function(self)
        if isMultiSelect then
            local selectedArr = {}
            for k_item, v_selected in pairs(currentSelectedItems) do
                if v_selected then
                    table.insert(selectedArr, k_item)
                end
            end
            return selectedArr
        else
            return currentSingleItem
        end
    end
    apiRef.SetValue = function(self, valOrVals)
        if not self.IsEnabled then
            return
        end
        initializeSelections(valOrVals)
        updateMainBtnText()
        if isOpen and listFrameInstance then
            filterItems(searchBoxInstance and searchBoxInstance.Text or "")
        end
    end
    apiRef.SetItems = function(self, newItems, newInitialValueOrValues)
        if not self.IsEnabled then
            return
        end
        itemsArray = newItems or {"(No Items)"}
        if #itemsArray == 0 then
            table.insert(itemsArray, "(No Items)")
        end
        originalItemsArray = table.clone(itemsArray)
        hasAnyIcon = false
        for _, item_in_arr in ipairs(originalItemsArray) do
            if getItemIcon(item_in_arr) then
                hasAnyIcon = true
                break
            end
        end
        initializeSelections(newInitialValueOrValues)
        filterItems(searchBoxInstance and searchBoxInstance.Text or "")
        updateMainBtnText()
        if isOpen then
            closeDropdownMenu()
            openDropdownMenu()
        end
    end
    apiRef.Gui = controlRow
    apiRef.Type = "Dropdown"
    apiRef.Hub = hub
    apiRef.IsMultiSelect = isMultiSelect

    apiRef.SetEnabled = function(self, enabled)
        self.IsEnabled = enabled == true
        mainBtn.Sensitive = self.IsEnabled
        local originalBgColor = hub.Theme.DropdownButton
        mainBtn.BackgroundColor3 =
            self.IsEnabled and originalBgColor or
            Color3.fromRGB(originalBgColor.R * 0.7, originalBgColor.G * 0.7, originalBgColor.B * 0.7)
        mainBtn.TextTransparency = self.IsEnabled and 0 or 0.3
        if not self.IsEnabled then
            self:Close()
        end
    end
    apiRef.SetVisible = function(self, visible)
        AnimateElementVisibility(controlRow, visible == true, 0.2)
        if not visible then
            self:Close()
        end
    end
    local events = {}
    apiRef.ConnectEvent = function(self, eventName, cb)
        if not events[eventName] then
            events[eventName] = {}
        end
        table.insert(events[eventName], cb)
        -- FireEvent fonksiyonu henüz tanımlanmadı, callback tetikleme mantığına göre eklenebilir.
    end

    setmetatable(apiRef, {__index = TrxLib.SubTabMethods})
    mainBtn.MouseButton1Click:Connect(
        function()
            if not apiRef.IsEnabled then
                return
            end
            if isOpen then
                apiRef:Close()
            else
                openDropdownMenu()
            end
        end
    )
    AddControlToSubTabAndIncrementCounter(self, controlRow, apiRef)
    return apiRef
end

TrxLib.SubTabMethods.AddRangeSlider = function(
    self,
    labelText,
    descriptionText,
    minValue,
    maxValue,
    initialMin,
    initialMax,
    callback)
    local hub = self.Hub
    minValue = minValue or 0
    maxValue = maxValue or 100
    initialMin = math.clamp(initialMin or minValue, minValue, maxValue)
    initialMax = math.clamp(initialMax or maxValue, minValue, maxValue)
    if initialMin > initialMax then
        initialMin, initialMax = initialMax, initialMin
    end

    local currentMin, currentMax = initialMin, initialMax

    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelText, descriptionText, 0.65)
    local labelForSlider = leftPane:FindFirstChild("ControlLabel")
    if labelForSlider then
        labelForSlider.Text = labelText
    end

    local sliderFrame =
        CreateInstance(
        "Frame",
        {
            Name = "RangeSliderFrame",
            Parent = rightPane,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0.5, -hub.Theme.ControlHeight / 2),
            Size = UDim2.new(1, -(hub.Theme.ControlHeight * 2.8 + 10), 0, hub.Theme.ControlHeight)
        }
    )
    local track =
        CreateInstance(
        "Frame",
        {
            Name = "Track",
            Parent = sliderFrame,
            Size = UDim2.new(1, 0, 0, 6),
            Position = UDim2.new(0, 0, 0.5, -3),
            BackgroundColor3 = hub.Theme.SliderTrack,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = track, CornerRadius = UDim.new(1, 0)})

    local progressFill =
        CreateInstance(
        "Frame",
        {
            Name = "RangeSliderProgressFill",
            Parent = track,
            BackgroundColor3 = hub.Theme.SliderProgress,
            BorderSizePixel = 0,
            ZIndex = track.ZIndex + 1
        }
    )
    CreateInstance("UICorner", {Parent = progressFill, CornerRadius = UDim.new(1, 0)})

    local minThumb =
        CreateInstance(
        "ImageButton",
        {
            Name = "MinThumb",
            Parent = sliderFrame,
            Size = UDim2.new(0, 12, 0, 18),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = hub.Theme.SliderThumb,
            ZIndex = track.ZIndex + 2,
            Image = "",
            BorderSizePixel = 0,
            AutoButtonColor = false
        }
    )
    CreateInstance("UICorner", {Parent = minThumb, CornerRadius = UDim.new(0, hub.Theme.ButtonCornerRadius)})
    local maxThumb =
        CreateInstance(
        "ImageButton",
        {
            Name = "MaxThumb",
            Parent = sliderFrame,
            Size = UDim2.new(0, 12, 0, 18),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = hub.Theme.SliderThumb,
            ZIndex = track.ZIndex + 2,
            Image = "",
            BorderSizePixel = 0,
            AutoButtonColor = false
        }
    )
    CreateInstance("UICorner", {Parent = maxThumb, CornerRadius = UDim.new(0, hub.Theme.ButtonCornerRadius)})

    local minInput =
        CreateInstance(
        "TextBox",
        {
            Name = "RangeSliderValueInput",
            Parent = rightPane,
            Size = UDim2.new(0, hub.Theme.ControlHeight * 1.2, 0, hub.Theme.ControlHeight - 2),
            Position = UDim2.new(1, -(hub.Theme.ControlHeight * 2.4 + 5), 0.5, -(hub.Theme.ControlHeight - 2) / 2),
            BackgroundColor3 = hub.Theme.SliderInputBackground,
            BorderSizePixel = 0,
            Font = Enum.Font.SourceSans,
            Text = tostring(math.floor(currentMin)),
            TextColor3 = hub.Theme.InputText,
            TextSize = 11,
            ClearTextOnFocus = false,
            TextXAlignment = Enum.TextXAlignment.Center
        }
    )
    CreateInstance(
        "UICorner",
        {Parent = minInput, CornerRadius = UDim.new(0, math.max(1, hub.Theme.InputCornerRadius - 1))}
    )
    local maxInput =
        CreateInstance(
        "TextBox",
        {
            Name = "RangeSliderValueInput",
            Parent = rightPane,
            Size = UDim2.new(0, hub.Theme.ControlHeight * 1.2, 0, hub.Theme.ControlHeight - 2),
            Position = UDim2.new(1, -(hub.Theme.ControlHeight * 1.2), 0.5, -(hub.Theme.ControlHeight - 2) / 2),
            BackgroundColor3 = hub.Theme.SliderInputBackground,
            BorderSizePixel = 0,
            Font = Enum.Font.SourceSans,
            Text = tostring(math.floor(currentMax)),
            TextColor3 = hub.Theme.InputText,
            TextSize = 11,
            ClearTextOnFocus = false,
            TextXAlignment = Enum.TextXAlignment.Center
        }
    )
    CreateInstance(
        "UICorner",
        {Parent = maxInput, CornerRadius = UDim.new(0, math.max(1, hub.Theme.InputCornerRadius - 1))}
    )

    local api
    local draggingMinThumb, draggingMaxThumb = false, false

    local function updateRangeSlider(newMinValue, newMaxValue, fromInputMin, fromInputMax) -- Bu iç fonksiyona self GEREKMEZ
        newMinValue = math.clamp(tonumber(newMinValue) or minValue, minValue, maxValue)
        newMaxValue = math.clamp(tonumber(newMaxValue) or minValue, minValue, maxValue)

        if not draggingMinThumb and not draggingMaxThumb then
            if newMinValue > newMaxValue then
                if fromInputMin then
                    newMaxValue = newMinValue
                elseif fromInputMax then
                    newMinValue = newMaxValue
                else
                    newMinValue, newMaxValue = newMaxValue, newMinValue
                end
            end
        end

        currentMin, currentMax = newMinValue, newMaxValue
        if currentMin > currentMax then
            if draggingMinThumb then
                currentMax = currentMin
            elseif draggingMaxThumb then
                currentMin = currentMax
            else
                currentMin, currentMax = currentMax, currentMin
            end
        end

        local minPerc = (maxValue - minValue == 0) and 0 or (currentMin - minValue) / (maxValue - minValue)
        local maxPerc = (maxValue - minValue == 0) and 0 or (currentMax - minValue) / (maxValue - minValue)

        if minThumb and minThumb.Parent then
            minThumb.Position = UDim2.new(minPerc, 0, 0.5, 0)
        end
        if maxThumb and maxThumb.Parent then
            maxThumb.Position = UDim2.new(maxPerc, 0, 0.5, 0)
        end
        if progressFill and progressFill.Parent then
            progressFill.Position = UDim2.new(math.min(minPerc, maxPerc), 0, 0, 0)
            progressFill.Size = UDim2.new(math.abs(maxPerc - minPerc), 0, 1, 0)
        end

        if not fromInputMin and minInput and minInput.Parent then
            minInput.Text = tostring(math.floor(currentMin))
        end
        if not fromInputMax and maxInput and maxInput.Parent then
            maxInput.Text = tostring(math.floor(currentMax))
        end

        if callback then
            task.spawn(callback, currentMin, currentMax)
        end
    end

    minInput.FocusLost:Connect(
        function(ep)
            if ep or UserInputService:GetFocusedTextBox() ~= minInput then
                updateRangeSlider(minInput.Text, currentMax, true, false)
            end
        end
    )
    maxInput.FocusLost:Connect(
        function(ep)
            if ep or UserInputService:GetFocusedTextBox() ~= maxInput then
                updateRangeSlider(currentMin, maxInput.Text, false, true)
            end
        end
    )

    api = {
        GetValues = function(self)
            return currentMin, currentMax
        end,
        SetValues = function(self, newMin, newMax)
            if typeof(newMin) == "number" and typeof(newMax) == "number" then
                updateRangeSlider(newMin, newMax, false, false)
            else
                warn("TrxLib.AddRangeSlider.SetValues: Expected numbers for newMin and newMax.")
            end
        end,
        Gui = controlRow,
        Type = "RangeSlider",
        Hub = hub
    }
    setmetatable(api, {__index = TrxLib.SubTabMethods})

    local renderSteppedConn, inputEndedConn_Min, inputEndedConn_Max
    local minThumbBeganConn, maxThumbBeganConn
    local globalInputEndedConn

    minThumbBeganConn =
        minThumb.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                draggingMinThumb = true
                draggingMaxThumb = false
            end
        end
    )
    maxThumbBeganConn =
        maxThumb.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                draggingMaxThumb = true
                draggingMinThumb = false
            end
        end
    )

    globalInputEndedConn =
        UserInputService.InputEnded:Connect(
        function(input)
            if
                (input.UserInputType == Enum.UserInputType.MouseButton1 or
                    input.UserInputType == Enum.UserInputType.Touch)
             then
                if draggingMinThumb or draggingMaxThumb then
                    updateRangeSlider(currentMin, currentMax, false, false)
                end
                draggingMinThumb = false
                draggingMaxThumb = false
            end
        end
    )

    renderSteppedConn =
        RunService.RenderStepped:Connect(
        function()
            if not controlRow or not controlRow.Parent then
                if renderSteppedConn then
                    renderSteppedConn:Disconnect()
                end
                if globalInputEndedConn then
                    globalInputEndedConn:Disconnect()
                end
                if minThumbBeganConn then
                    minThumbBeganConn:Disconnect()
                end
                if maxThumbBeganConn then
                    maxThumbBeganConn:Disconnect()
                end
                return
            end
            if draggingMinThumb or draggingMaxThumb then
                local mPos
                if UserInputService.TouchEnabled and #UserInputService:GetTouchPositions() > 0 then
                    mPos = UserInputService:GetTouchPositions()[1]
                else
                    mPos = UserInputService:GetMouseLocation()
                end

                if not track or not track.Parent or not mPos then
                    return
                end

                local relX = mPos.X - track.AbsolutePosition.X
                local perc = math.clamp(relX / track.AbsoluteSize.X, 0, 1)
                local rawValue = minValue + (maxValue - minValue) * perc

                if draggingMinThumb then
                    updateRangeSlider(rawValue, currentMax, false, false)
                elseif draggingMaxThumb then
                    updateRangeSlider(currentMin, rawValue, false, false)
                end
            end
        end
    )

    controlRow.AncestryChanged:Connect(
        function(_, parent)
            if not parent then
                if renderSteppedConn then
                    renderSteppedConn:Disconnect()
                end
                if globalInputEndedConn then
                    globalInputEndedConn:Disconnect()
                end
                if minThumbBeganConn then
                    minThumbBeganConn:Disconnect()
                end
                if maxThumbBeganConn then
                    maxThumbBeganConn:Disconnect()
                end
            end
        end
    )

    api:SetValues(initialMin, initialMax)
    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddKeybind = function(self, labelText, descriptionText, initialKeyCode, callback)
    local hub = self.Hub
    initialKeyCode = initialKeyCode or Enum.KeyCode.Unknown
    local currentKey = initialKeyCode
    local isBinding = false
    local inputConn
    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelText, descriptionText, 0.45)

    local function getKeybindText(kc)
        if kc == Enum.KeyCode.Unknown then
            return "Click to Bind"
        else
            return kc.Name
        end
    end
    local keyBtn =
        CreateInstance(
        "TextButton",
        {
            Name = "KeyButton",
            Parent = rightPane,
            BackgroundColor3 = hub.Theme.ButtonBackground,
            Position = UDim2.new(0, 0, 0.5, -hub.Theme.ControlHeight / 2),
            Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight),
            Font = Enum.Font.SourceSans,
            Text = getKeybindText(currentKey),
            TextColor3 = hub.Theme.ButtonText,
            TextSize = 14,
            AutoButtonColor = false,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = keyBtn, CornerRadius = UDim.new(0, hub.Theme.ButtonCornerRadius)})
    local function stopBinding()
        isBinding = false
        if inputConn then
            inputConn:Disconnect()
            inputConn = nil
        end
        keyBtn.Text = getKeybindText(currentKey)
        keyBtn.BackgroundColor3 = hub.Theme.ButtonBackground
    end
    keyBtn.MouseEnter:Connect(
        function()
            if not isBinding then
                keyBtn.BackgroundColor3 = hub.Theme.ButtonHoverBackground
            end
        end
    )
    keyBtn.MouseLeave:Connect(
        function()
            if not isBinding then
                keyBtn.BackgroundColor3 = hub.Theme.ButtonBackground
            end
        end
    )
    keyBtn.MouseButton1Click:Connect(
        function()
            if isBinding then
                stopBinding()
            else
                isBinding = true
                keyBtn.Text = "[Press any key...]"
                keyBtn.BackgroundColor3 = hub.Theme.DropdownItemHover
                if inputConn then
                    inputConn:Disconnect()
                end
                inputConn =
                    UserInputService.InputBegan:Connect(
                    function(io, gp)
                        if gp and not (io.KeyCode == Enum.KeyCode.Escape and isBinding) then
                            return
                        end
                        if
                            io.UserInputType == Enum.UserInputType.Keyboard or
                                io.UserInputType == Enum.UserInputType.MouseButton1 or
                                io.UserInputType == Enum.UserInputType.MouseButton2 or
                                io.UserInputType == Enum.UserInputType.MouseButton3
                         then
                            if io.KeyCode == Enum.KeyCode.Escape then
                                currentKey = Enum.KeyCode.Unknown
                            else
                                currentKey = io.KeyCode
                            end
                            stopBinding()
                            if callback then
                                task.spawn(callback, currentKey)
                            end
                        end
                    end
                )
            end
        end
    )
    local api = {
        GetKeybind = function(self)
            return currentKey
        end,
        SetKeybind = function(self, kc)
            currentKey = kc or Enum.KeyCode.Unknown
            keyBtn.Text = getKeybindText(currentKey)
        end,
        ClearKeybind = function(self)
            currentKey = Enum.KeyCode.Unknown
            keyBtn.Text = getKeybindText(currentKey)
        end,
        IsBinding = function(self)
            return isBinding
        end,
        Gui = controlRow,
        Type = "Keybind"
    }
    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddSeparator = function(self)
    local hub = self.Hub
    local sep =
        CreateInstance(
        "Frame",
        {
            Name = "SeparatorLine",
            BackgroundColor3 = hub.Theme.SeparatorLineColor,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 1),
            Position = UDim2.new(0, 0, 0.5, 0)
        }
    )
    local sepContainer =
        CreateInstance(
        "Frame",
        {
            Name = "SeparatorContainer",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, hub.Theme.ControlSpacing / 1.5)
        }
    )
    sep.Parent = sepContainer
    CreateInstance(
        "UIPadding",
        {
            Parent = sepContainer,
            PaddingTop = UDim.new(0, hub.Theme.ControlSpacing / 3),
            PaddingBottom = UDim.new(0, hub.Theme.ControlSpacing / 3)
        }
    )
    AddControlToSubTabAndIncrementCounter(self, sepContainer, {Gui = sepContainer, Type = "Separator"})
    return {Gui = sepContainer}
end

TrxLib.SubTabMethods.AddProgressBar = function(
    self,
    labelText,
    descriptionText,
    minValue,
    maxValue,
    initialValue,
    options)
    local hub = self.Hub
    options = options or {}
    minValue = minValue or 0
    maxValue = maxValue or 100
    initialValue = math.clamp(initialValue or minValue, minValue, maxValue)

    local currentValue = initialValue

    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelText, descriptionText, 0.55)

    local progressBarFrame =
        CreateInstance(
        "Frame",
        {
            Name = "ProgressBarFrame",
            Parent = rightPane,
            Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight / 1.5), -- Yükseklik ayarlanabilir
            Position = UDim2.new(0, 0, 0.5, -(hub.Theme.ControlHeight / 1.5) / 2),
            BackgroundColor3 = options.BackgroundColor or hub.Theme.InputBackground,
            BorderSizePixel = 0,
            ClipsDescendants = true
        }
    )
    CreateInstance("UICorner", {Parent = progressBarFrame, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius)})

    local progressFill =
        CreateInstance(
        "Frame",
        {
            Name = "ProgressFill",
            Parent = progressBarFrame,
            Size = UDim2.new(
                (maxValue - minValue == 0) and 0 or (currentValue - minValue) / (maxValue - minValue),
                0,
                1,
                0
            ),
            BackgroundColor3 = options.ProgressColor or hub.Theme.SliderProgress,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = progressFill, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius)})

    local progressTextLabel = nil
    if options.ShowText ~= false then
        progressTextLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "ProgressText",
                Parent = progressBarFrame,
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Font = Enum.Font.SourceSansSemibold,
                Text = string.format(
                    "%.0f%%",
                    (maxValue - minValue == 0) and 0 or ((currentValue - minValue) / (maxValue - minValue) * 100)
                ),
                TextColor3 = options.TextColor or hub.Theme.InputText,
                TextSize = 11,
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = progressFill.ZIndex + 1,
                RichText = false
            }
        )
    end

    local function updateProgressBarVisuals()
        local percentage = (maxValue - minValue == 0) and 0 or (currentValue - minValue) / (maxValue - minValue)
        progressFill.Size = UDim2.new(percentage, 0, 1, 0)
        if progressTextLabel then
            progressTextLabel.Text = string.format("%.0f%%", percentage * 100)
        end
    end

    local api = {
        Gui = controlRow,
        Type = "ProgressBar",
        GetValue = function(self)
            return currentValue
        end,
        SetValue = function(self, value)
            if typeof(value) == "number" then
                currentValue = math.clamp(value, minValue, maxValue)
                updateProgressBarVisuals()
            else
                warn("TrxLib.AddProgressBar.SetValue: Expected a number, got " .. typeof(value))
            end
        end,
        SetMinMax = function(self, newMin, newMax)
            if typeof(newMin) == "number" and typeof(newMax) == "number" and newMin < newMax then
                minValue = newMin
                maxValue = newMax
                currentValue = math.clamp(currentValue, minValue, maxValue)
                updateProgressBarVisuals()
            else
                warn("TrxLib.AddProgressBar.SetMinMax: Expected numbers for newMin < newMax.")
            end
        end,
        SetProgressColor = function(self, color)
            if typeof(color) == "Color3" then
                progressFill.BackgroundColor3 = color
            else
                warn("TrxLib.AddProgressBar.SetProgressColor: Expected a Color3 value, got " .. typeof(color))
            end
        end
    }
    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddImage = function(self, labelText, descriptionText, initialImageId, options)
    local hub = self.Hub
    options = options or {}

    local imageSize = options.Size or UDim2.new(0, 100, 0, 100) -- Varsayılan boyut
    local rightPaneWidth = imageSize.X.Scale
    local rightPaneOffset = imageSize.X.Offset

    local controlRow, leftPane, rightPane =
        self:_CreateControlBase(labelText, descriptionText, 0, imageSize.X.Offset + (hub.Theme.Padding / 2))
    rightPane.Size = imageSize -- Sağ panelin boyutunu doğrudan resim boyutu yapalım
    rightPane.LayoutOrder = 2 -- RightPane her zaman sağda olmalı
    leftPane.Size = UDim2.new(1, -imageSize.X.Offset - (hub.Theme.Padding), 1, 0) -- Sol paneli kalan alana yay

    if not labelText or labelText == "" then -- Eğer label yoksa, sol paneli gizle
        leftPane.Visible = false
        rightPane.Size = UDim2.new(1, 0, 0, imageSize.Y.Offset) -- Sağ panel tam genişlik, yükseklik resim kadar
        rightPane.Position = UDim2.new(0, 0, 0, 0)
        controlRow.UIListLayout.Padding = UDim.new(0, 0)
    else
        -- rightPane'in dikeyde ortalanması için:
        rightPane.AnchorPoint = Vector2.new(0, 0.5)
        rightPane.Position = UDim2.new(0, 0, 0.5, 0)
    end

    local imageLabel =
        CreateInstance(
        "ImageLabel",
        {
            Name = "DisplayedImage",
            Parent = rightPane, -- Etiketi sağ panele koyuyoruz
            Size = UDim2.new(1, 0, 1, 0), -- Sağ panelin tamamını kapla
            Position = UDim2.new(0, 0, 0, 0),
            Image = initialImageId or "",
            ScaleType = options.ScaleType or Enum.ScaleType.Fit,
            BackgroundTransparency = 1,
            ImageColor3 = options.ImageColor3 or Color3.new(1, 1, 1),
            ImageTransparency = options.ImageTransparency or 0
        }
    )

    if options.ClickCallback then
        local imageButton =
            CreateInstance(
            "ImageButton",
            {
                Name = "ClickableDisplayedImage",
                Parent = rightPane,
                Size = UDim2.new(1, 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0),
                Image = initialImageId or "",
                ScaleType = options.ScaleType or Enum.ScaleType.Fit,
                BackgroundTransparency = 1,
                ImageColor3 = options.ImageColor3 or Color3.new(1, 1, 1),
                ImageTransparency = options.ImageTransparency or 0,
                AutoButtonColor = false
            }
        )
        imageLabel.Visible = false
        imageButton.MouseButton1Click:Connect(options.ClickCallback)
        imageLabel = imageButton
    end

    local api = {
        Gui = controlRow,
        Type = "Image",
        SetImage = function(self, imageId)
            if typeof(imageId) == "string" then
                imageLabel.Image = imageId
            else
                warn("TrxLib.AddImage.SetImage: Expected a string (assetId), got " .. typeof(imageId))
            end
        end,
        SetImageColor = function(self, color)
            if typeof(color) == "Color3" then
                imageLabel.ImageColor3 = color
            else
                warn("TrxLib.AddImage.SetImageColor: Expected a Color3 value, got " .. typeof(color))
            end
        end,
        SetImageTransparency = function(self, transparency)
            if typeof(transparency) == "number" then
                imageLabel.ImageTransparency = math.clamp(transparency, 0, 1)
            else
                warn("TrxLib.AddImage.SetImageTransparency: Expected a number, got " .. typeof(transparency))
            end
        end,
        SetScaleType = function(self, scaleType)
            if typeof(scaleType) == "EnumItem" and scaleType.EnumType == Enum.ScaleType then
                imageLabel.ScaleType = scaleType
            else
                warn("TrxLib.AddImage.SetScaleType: Expected an Enum.ScaleType value.")
            end
        end
    }
    AddControlToSubTabAndIncrementCounter(self, controlRow, api)
    return api
end

TrxLib.SubTabMethods.AddLogView = function(self, labelText, descriptionText, options)
    local hub = self.Hub
    options = options or {}

    local height = options.Height or 150 -- Varsayılan yükseklik
    -- _CreateControlBase burada doğrudan kullanışlı olmayabilir çünkü log alanı genellikle tam genişlikte olur.
    -- Etiketi ve log alanını ayrı ayrı düzenleyelim.

    local controlContainer =
        CreateInstance(
        "Frame",
        {
            -- Bu tüm kontrolü tutacak
            Name = (labelText or "LogView") .. "Container",
            Size = UDim2.new(1, 0, 0, 0), -- Yükseklik otomatik olacak
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1
        }
    )
    local listLayout =
        CreateInstance(
        "UIListLayout",
        {
            Parent = controlContainer,
            FillDirection = Enum.FillDirection.Vertical,
            Padding = UDim.new(0, hub.Theme.ControlSpacing / 2)
        }
    )

    if labelText and labelText ~= "" then
        local labelRow =
            CreateInstance(
            "Frame",
            {
                Name = "LabelRow",
                Parent = controlContainer,
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1,
                LayoutOrder = 1
            }
        )
        -- AddLabel'daki mantığı kısmen kullanabiliriz
        local logLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "LogViewLabel",
                Parent = labelRow,
                Text = labelText,
                TextColor3 = hub.Theme.LabelText,
                Font = Enum.Font.SourceSansSemibold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 18),
                AutomaticSize = Enum.AutomaticSize.Y,
                RichText = false
            }
        )
        if descriptionText and descriptionText ~= "" then
            CreateInstance(
                "TextLabel",
                {
                    Name = "LogViewDescription",
                    Parent = labelRow,
                    Text = descriptionText,
                    TextColor3 = hub.Theme.DescriptionText,
                    Font = Enum.Font.SourceSans,
                    TextSize = 11,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextWrapped = true,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 14),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    RichText = false
                }
            )
            CreateInstance(
                "UIListLayout",
                {Parent = labelRow, FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0, 2)}
            )
        end
    end

    local scrollingFrame =
        CreateInstance(
        "ScrollingFrame",
        {
            Name = "LogScrollingFrame",
            Parent = controlContainer,
            Size = UDim2.new(1, 0, 0, height),
            BackgroundColor3 = options.BackgroundColor or hub.Theme.InputBackground,
            BorderSizePixel = 1,
            BorderColor3 = hub.Theme.InputBorderColor,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = hub.Theme.ScrollBarThickness or 6,
            ScrollBarImageColor3 = hub.Theme.ScrollBarColor,
            LayoutOrder = 2,
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        }
    )
    CreateInstance("UICorner", {Parent = scrollingFrame, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius)})

    local contentListLayout =
        CreateInstance(
        "UIListLayout",
        {
            Parent = scrollingFrame,
            FillDirection = Enum.FillDirection.Vertical,
            Padding = UDim.new(0, 2),
            HorizontalAlignment = Enum.HorizontalAlignment.Left
        }
    )
    CreateInstance(
        "UIPadding",
        {
            -- İçeriğe biraz padding
            Parent = scrollingFrame,
            PaddingLeft = UDim.new(0, 5),
            PaddingRight = UDim.new(0, 5),
            PaddingTop = UDim.new(0, 3),
            PaddingBottom = UDim.new(0, 3)
        }
    )

    local logLines = {}
    local autoScroll = options.AutoScroll == nil and true or options.AutoScroll

    local function addLineToGui(textLine, color)
        local lineLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "LogLine",
                Parent = scrollingFrame,
                Text = textLine,
                Font = options.Font or Enum.Font.Code,
                TextSize = options.TextSize or 12,
                TextColor3 = color or options.TextColor or hub.Theme.InputText,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true, -- Uzun satırları sar
                BackgroundTransparency = 1,
                Size = UDim2.new(
                    1,
                    -(contentListLayout.Parent.UIPadding.PaddingLeft.Offset +
                        contentListLayout.Parent.UIPadding.PaddingRight.Offset),
                    0,
                    0
                ), -- Tam genişlik için ayar
                AutomaticSize = Enum.AutomaticSize.Y,
                RichText = options.RichText == true -- Opsiyonel RichText
            }
        )
        table.insert(logLines, lineLabel)

        if autoScroll then
            task.wait() -- Allow UI to update canvas size
            scrollingFrame.CanvasPosition =
                Vector2.new(scrollingFrame.CanvasPosition.X, contentListLayout.AbsoluteContentSize.Y)
        end
        return lineLabel
    end

    local api = {
        Gui = controlContainer,
        Type = "LogView",
        AddLine = function(self, text, color)
            if typeof(text) == "string" then
                return addLineToGui(text, color)
            else
                warn("TrxLib.AddLogView.AddLine: Expected a string, got " .. typeof(text))
            end
        end,
        ClearLog = function(self)
            for _, lineLabel in ipairs(logLines) do
                lineLabel:Destroy()
            end
            logLines = {}
            scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        end,
        SetAutoScroll = function(self, enabled)
            if typeof(enabled) == "boolean" then
                autoScroll = enabled
            else
                warn("TrxLib.AddLogView.SetAutoScroll: Expected a boolean, got " .. typeof(enabled))
            end
        end
    }
    AddControlToSubTabAndIncrementCounter(self, controlContainer, api)
    return api
end

TrxLib.SubTabMethods.AddTextArea = function(self, labelText, descriptionText, placeholderText, initialValue, options)
    local hub = self.Hub
    options = options or {}

    local height = options.Height or 80 -- Varsayılan yükseklik
    -- _CreateControlBase burada tam olarak uymayabilir, sağ panel TextBox olmalı.
    -- Bu yüzden kontrol düzenini AddLogView'a benzer şekilde yapacağız.

    local controlContainer =
        CreateInstance(
        "Frame",
        {
            Name = (labelText or "TextArea") .. "Container",
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1
        }
    )
    local listLayout =
        CreateInstance(
        "UIListLayout",
        {
            Parent = controlContainer,
            FillDirection = Enum.FillDirection.Vertical,
            Padding = UDim.new(0, hub.Theme.ControlSpacing / 2)
        }
    )

    if labelText and labelText ~= "" then
        local labelRow =
            CreateInstance(
            "Frame",
            {
                Name = "LabelRow",
                Parent = controlContainer,
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1,
                LayoutOrder = 1
            }
        )
        local areaLabel =
            CreateInstance(
            "TextLabel",
            {
                Name = "TextAreaLabel",
                Parent = labelRow,
                Text = labelText,
                TextColor3 = hub.Theme.LabelText,
                Font = Enum.Font.SourceSansSemibold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 18),
                AutomaticSize = Enum.AutomaticSize.Y,
                RichText = false
            }
        )
        if descriptionText and descriptionText ~= "" then
            CreateInstance(
                "TextLabel",
                {
                    Name = "TextAreaDescription",
                    Parent = labelRow,
                    Text = descriptionText,
                    TextColor3 = hub.Theme.DescriptionText,
                    Font = Enum.Font.SourceSans,
                    TextSize = 11,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextWrapped = true,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 14),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    RichText = false
                }
            )
            CreateInstance(
                "UIListLayout",
                {Parent = labelRow, FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0, 2)}
            )
        end
    end

    local textBox =
        CreateInstance(
        "TextBox",
        {
            Name = "MultilineInput",
            Parent = controlContainer,
            Size = UDim2.new(1, 0, 0, height),
            LayoutOrder = 2,
            BackgroundColor3 = hub.Theme.InputBackground,
            Font = Enum.Font.SourceSans,
            Text = initialValue or "",
            PlaceholderText = placeholderText or "Enter text here...",
            TextColor3 = hub.Theme.InputText,
            PlaceholderColor3 = hub.Theme.InputPlaceholder,
            TextSize = 14,
            ClearTextOnFocus = false,
            MultiLine = true,
            TextWrapped = true,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            BorderSizePixel = 1, -- Tema'dan da alınabilir
            BorderColor3 = hub.Theme.InputBorderColor
        }
    )
    CreateInstance("UICorner", {Parent = textBox, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius)})
    CreateInstance(
        "UIPadding",
        {
            -- İçeriğe biraz padding
            Parent = textBox,
            PaddingLeft = UDim.new(0, 5),
            PaddingRight = UDim.new(0, 5),
            PaddingTop = UDim.new(0, 5),
            PaddingBottom = UDim.new(0, 5)
        }
    )

    if options.CallbackOnFocusLost then
        textBox.FocusLost:Connect(
            function(enterPressed)
                -- MultiLine TextBox'larda enterPressed genellikle satır atlamak için kullanılır.
                -- Bu yüzden sadece odak kaybedildiğinde callback'i tetikleyebiliriz.
                if UserInputService:GetFocusedTextBox() ~= textBox then
                    task.spawn(options.CallbackOnFocusLost, textBox.Text)
                end
            end
        )
    end
    if options.CallbackOnTextChanged then -- Anlık değişimler için
        textBox:GetPropertyChangedSignal("Text"):Connect(
            function()
                task.spawn(options.CallbackOnTextChanged, textBox.Text)
            end
        )
    end

    local api = {
        Gui = controlContainer,
        Type = "TextArea",
        GetValue = function(self)
            return textBox.Text
        end,
        SetValue = function(self, text)
            if typeof(text) == "string" then
                textBox.Text = text
            else
                warn("TrxLib.AddTextArea.SetValue: Expected a string, got " .. typeof(text))
            end
        end,
        Clear = function(self)
            textBox.Text = ""
        end,
        AppendText = function(self, textToAppend, newLine)
            if typeof(textToAppend) == "string" then
                local currentText = textBox.Text
                if newLine == nil or newLine == true then
                    textBox.Text = currentText .. (currentText == "" and "" or "\n") .. textToAppend
                else
                    textBox.Text = currentText .. textToAppend
                end
            else
                warn("TrxLib.AddTextArea.AppendText: Expected a string, got " .. typeof(textToAppend))
            end
        end
    }
    AddControlToSubTabAndIncrementCounter(self, controlContainer, api)
    return api
end

TrxLib.SubTabMethods.AddColorPicker = function(
    self,
    labelTextContent,
    descriptionTextContent,
    initialColor,
    callbackFunction,
    options)
    local hub = self.Hub
    options = options or {}

    local apiRef = {Gui = nil, Type = "ColorPicker", IsEnabled = true}

    local initialC3Value = Color3.new(1, 1, 1)
    local initialAlphaValue = 1

    if typeof(initialColor) == "Color3" then
        initialC3Value = initialColor
    elseif typeof(initialColor) == "table" then
        if typeof(initialColor.Color) == "Color3" then
            initialC3Value = initialColor.Color
        end
        if typeof(initialColor.Alpha) == "number" then
            initialAlphaValue = math.clamp(initialColor.Alpha, 0, 1)
        else
            initialAlphaValue = 1
        end
    end

    local currentColor = initialC3Value
    local currentAlpha = initialAlphaValue
    local currentInputMode = "Hex"

    local controlRow, leftPane, rightPane = self:_CreateControlBase(labelTextContent, descriptionTextContent, 0.55)
    apiRef.Gui = controlRow

    local colorModeButton
    local colorInputTextBox
    local colorPreviewButton
    local presetsPopupContainer
    local isPresetsPopupOpen = false -- Değişken adını düzelttim (öncekiyle tutarlı olması için)

    local controlElementHeight = hub.Theme.ControlHeight
    local colorPreviewWidth = controlElementHeight + 8 -- Renk önizleme biraz daha geniş

    local function updateDisplayedColorText()
        if not colorInputTextBox or not colorInputTextBox.Parent then
            return
        end
        local r, g, b =
            math.floor(currentColor.R * 255 + 0.5),
            math.floor(currentColor.G * 255 + 0.5),
            math.floor(currentColor.B * 255 + 0.5)
        local alphaString
        if currentInputMode == "RGB" then
            colorInputTextBox.Text = string.format("%d,%d,%d", r, g, b)
        elseif currentInputMode == "Hex" then
            colorInputTextBox.Text = string.format("#%02X%02X%02X", r, g, b)
        elseif currentInputMode == "RGBA" then
            alphaString = string.format("%.2f", currentAlpha):gsub("^0%.", "."):gsub("%.?0+$", "")
            if alphaString == "" or alphaString == "0" then
                alphaString = "0"
            elseif alphaString == "1" then
                alphaString = "1"
            end
            colorInputTextBox.Text = string.format("%d,%d,%d,%s", r, g, b, alphaString)
        end
        if colorModeButton then
            colorModeButton.Text = currentInputMode .. " ▼"
        end
    end

    local function parseColorInputText(inputText)
        local cleanedInput = inputText:gsub("%s+", "")
        local newColor3, newAlpha = nil, nil
        if currentInputMode == "RGB" then
            local r, g, bVal = cleanedInput:match("^(%d+),(%d+),(%d+)$")
            if r and g and bVal then
                r, g, bVal = tonumber(r), tonumber(g), tonumber(bVal)
                if r and g and bVal then
                    newColor3 = Color3.fromRGB(math.clamp(r, 0, 255), math.clamp(g, 0, 255), math.clamp(bVal, 0, 255))
                    newAlpha = currentAlpha
                end
            end
        elseif currentInputMode == "Hex" then
            local hM = cleanedInput:match("^#?([a-fA-F0-9]{6})$")
            if hM then
                local s, r = pcall(Color3.fromHex, hM)
                if s then
                    newColor3 = r
                    newAlpha = currentAlpha
                end
            else
                hM = cleanedInput:match("^#?([a-fA-F0-9]{3})$")
                if hM then
                    local rH, gH, bH = string.sub(hM, 1, 1), string.sub(hM, 2, 2), string.sub(hM, 3, 3)
                    local s, r = pcall(Color3.fromHex, rH .. rH .. gH .. gH .. bH .. bH)
                    if s then
                        newColor3 = r
                        newAlpha = currentAlpha
                    end
                end
            end
        elseif currentInputMode == "RGBA" then
            local r, g, bVal, aStr = cleanedInput:match("^(%d+),(%d+),(%d+),([%d.,]+)$")
            if r and g and bVal and aStr then
                r, g, bVal = tonumber(r), tonumber(g), tonumber(bVal)
                local aN = tonumber(aStr:gsub(",", "."))
                if r and g and bVal and aN ~= nil then
                    newColor3 = Color3.fromRGB(math.clamp(r, 0, 255), math.clamp(g, 0, 255), math.clamp(bVal, 0, 255))
                    newAlpha = math.clamp(aN, 0, 1)
                end
            end
        end
        return newColor3, newAlpha
    end

    rightPane.Size = UDim2.new(rightPane.Size.X.Scale, rightPane.Size.X.Offset, 0, controlElementHeight)

    CreateInstance(
        "UIListLayout",
        {
            Parent = rightPane,
            FillDirection = Enum.FillDirection.Horizontal,
            VerticalAlignment = Enum.VerticalAlignment.Center,
            Padding = UDim.new(0, 5)
        }
    )
    colorModeButton =
        CreateInstance(
        "TextButton",
        {
            Name = "ColorModeButton",
            Parent = rightPane,
            LayoutOrder = 1,
            Size = UDim2.new(0, 55, 0, controlElementHeight - 4),
            Font = Enum.Font.SourceSansSemibold,
            TextSize = 11,
            TextColor3 = hub.Theme.ButtonText,
            BackgroundColor3 = hub.Theme.DropdownButton,
            AutoButtonColor = false,
            TextXAlignment = Enum.TextXAlignment.Center
        }
    )
    CreateInstance("UICorner", {Parent = colorModeButton, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius - 1)})

    colorInputTextBox =
        CreateInstance(
        "TextBox",
        {
            Name = "ColorInputTextBox",
            Parent = rightPane,
            LayoutOrder = 2,
            Size = UDim2.new(1, -(55 + 5 + colorPreviewWidth + 5), 0, controlElementHeight - 4),
            BackgroundColor3 = hub.Theme.InputBackground,
            Font = Enum.Font.SourceSans,
            TextColor3 = hub.Theme.InputText,
            PlaceholderColor3 = hub.Theme.InputPlaceholder,
            TextSize = 12,
            ClearTextOnFocus = false,
            BorderSizePixel = 0,
            TextXAlignment = Enum.TextXAlignment.Center
        }
    )
    CreateInstance(
        "UICorner",
        {Parent = colorInputTextBox, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius - 1)}
    )

    colorPreviewButton =
        CreateInstance(
        "TextButton",
        {
            Name = "ColorPreviewButton",
            Parent = rightPane,
            LayoutOrder = 3,
            Size = UDim2.new(0, colorPreviewWidth, 0, controlElementHeight - 4),
            Text = "",
            AutoButtonColor = false,
            BorderSizePixel = 1,
            BorderColor3 = Color3.fromRGB(70, 70, 70)
        }
    )
    CreateInstance(
        "UICorner",
        {Parent = colorPreviewButton, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius - 1)}
    )

    CreateInstance(
        "ImageLabel",
        {
            Parent = colorPreviewButton,
            Size = UDim2.new(1, 0, 1, 0),
            Image = "rbxassetid://2609200982",
            ScaleType = Enum.ScaleType.Tile,
            TileSize = UDim2.new(0, 5, 0, 5),
            ImageTransparency = 0.6,
            BackgroundTransparency = 1,
            ZIndex = colorPreviewButton.ZIndex + 1
        }
    )
    local actualColorPreview =
        CreateInstance(
        "Frame",
        {
            Parent = colorPreviewButton,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundColor3 = currentColor,
            BackgroundTransparency = 1 - currentAlpha,
            ZIndex = colorPreviewButton.ZIndex + 2
        }
    )
    updateDisplayedColorText()

    local colorModeDropdownFrame  -- Tanımlamayı yukarı taşıdım, openColorModeDropdown içinde referans ediliyor
    local isColorModeDropdownOpen = false -- Bu da yukarıda vardı zaten.

    local function openColorModeDropdown()
        if isColorModeDropdownOpen then
            if colorModeDropdownFrame then
                colorModeDropdownFrame:Destroy()
                colorModeDropdownFrame = nil
            end
            isColorModeDropdownOpen = false
            if hub._ManageDropdownState then
                hub:_ManageDropdownState(apiRef, false)
            end
            return
        end
        if colorModeDropdownFrame and colorModeDropdownFrame.Parent then
            colorModeDropdownFrame:Destroy()
            colorModeDropdownFrame = nil
        end
        isColorModeDropdownOpen = true
        if hub._ManageDropdownState then
            hub:_ManageDropdownState(apiRef, true)
        end
        colorModeDropdownFrame =
            CreateInstance(
            "Frame",
            {
                Name = "ColorModeDropdownFrame",
                Parent = hub.ScreenGui,
                Size = UDim2.new(0, colorModeButton.AbsoluteSize.X, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                Position = UDim2.fromOffset(
                    colorModeButton.AbsolutePosition.X,
                    colorModeButton.AbsolutePosition.Y + colorModeButton.AbsoluteSize.Y + 2
                ),
                BackgroundColor3 = hub.Theme.DropdownBackground,
                BorderSizePixel = 1,
                BorderColor3 = hub.Theme.DropdownBorderColor,
                ZIndex = hub.ScreenGui.DisplayOrder + 60,
                ClipsDescendants = true
            }
        )
        CreateInstance(
            "UICorner",
            {Parent = colorModeDropdownFrame, CornerRadius = UDim.new(0, hub.Theme.DropdownItemCornerRadius - 1)}
        )
        CreateInstance(
            "UIListLayout",
            {Parent = colorModeDropdownFrame, Padding = UDim.new(0, 1), SortOrder = Enum.SortOrder.LayoutOrder}
        )
        for _, modeName in ipairs({"RGB", "Hex", "RGBA"}) do
            local itemBtn =
                CreateInstance(
                "TextButton",
                {
                    Parent = colorModeDropdownFrame,
                    Size = UDim2.new(1, 0, 0, hub.Theme.ControlHeight - 10),
                    Text = modeName,
                    Font = Enum.Font.SourceSans,
                    TextSize = 11,
                    TextColor3 = (modeName == currentInputMode) and hub.Theme.SubTabActiveText or hub.Theme.ButtonText,
                    BackgroundColor3 = (modeName == currentInputMode) and hub.Theme.SubTabActiveBackground or
                        hub.Theme.DropdownBackground,
                    AutoButtonColor = false
                }
            )
            CreateInstance(
                "UICorner",
                {Parent = itemBtn, CornerRadius = UDim.new(0, hub.Theme.DropdownItemCornerRadius - 2)}
            )
            itemBtn.MouseEnter:Connect(
                function()
                    if modeName ~= currentInputMode then
                        itemBtn.BackgroundColor3 = hub.Theme.DropdownItemHover
                    end
                end
            )
            itemBtn.MouseLeave:Connect(
                function()
                    if modeName ~= currentInputMode then
                        itemBtn.BackgroundColor3 = hub.Theme.DropdownBackground
                    end
                end
            )
            itemBtn.MouseButton1Click:Connect(
                function()
                    currentInputMode = modeName
                    updateDisplayedColorText()
                    if colorModeDropdownFrame then
                        colorModeDropdownFrame:Destroy()
                        colorModeDropdownFrame = nil
                    end
                    isColorModeDropdownOpen = false
                    if hub._ManageDropdownState then
                        hub:_ManageDropdownState(apiRef, false)
                    end
                end
            )
        end
    end
    colorModeButton.MouseButton1Click:Connect(openColorModeDropdown)

    local popupOpenConnection = nil
    local popupJustOpened = false

    local function cloneTable(oT)
        local oTy = type(oT)
        local c
        if oTy == "table" then
            c = {}
            for k, v in next, oT, nil do
                c[cloneTable(k)] = cloneTable(v)
            end
            setmetatable(c, cloneTable(getmetatable(oT)))
        else
            c = oT
        end
        return c
    end
    local colorPresets =
        cloneTable(
        options.Palette or
            {
                {Color = Color3.fromRGB(230, 0, 38)},
                {Color = Color3.fromRGB(0, 122, 204)},
                {Color = Color3.fromRGB(76, 175, 80)},
                {Color = Color3.fromRGB(255, 193, 7)},
                {Color = Color3.fromRGB(156, 39, 176)}
            }
    )

    local function updateMainPreviewAndTextInternal()
        if actualColorPreview and actualColorPreview.Parent then
            actualColorPreview.BackgroundColor3 = currentColor
            actualColorPreview.BackgroundTransparency = 1 - currentAlpha
        end
        updateDisplayedColorText()
    end
    updateMainPreviewAndTextInternal()

    local function closePresetsPopup()
        if presetsPopupContainer and presetsPopupContainer.Parent then
            local tw =
                TweenService:Create(
                presetsPopupContainer,
                TweenInfo.new(0.15),
                {GroupTransparency = 1, Position = presetsPopupContainer.Position + UDim2.fromOffset(0, 10)}
            )
            tw.Completed:Connect(
                function()
                    if presetsPopupContainer then
                        presetsPopupContainer:Destroy()
                    end
                    presetsPopupContainer = nil
                end
            )
            tw:Play()
        end
        if popupOpenConnection then
            popupOpenConnection:Disconnect()
            popupOpenConnection = nil
        end
        if hub._ManageDropdownState then
            hub:_ManageDropdownState(apiRef, false)
        end
        isPresetsPopupOpen = false
    end

    local function createPresetsPopup()
        if presetsPopupContainer and presetsPopupContainer.Parent then
            return
        end
        closePresetsPopup()
        if hub._ManageDropdownState then
            hub:_ManageDropdownState(apiRef, true)
        end
        popupJustOpened = true
        isPresetsPopupOpen = true
        presetsPopupContainer =
            CreateInstance(
            "CanvasGroup",
            {
                Name = "ColorPresetsPopup",
                Parent = hub.ScreenGui,
                Size = UDim2.new(0, math.max(200, controlRow.AbsoluteSize.X * (rightPane.Size.X.Scale))),
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundColor3 = hub.Theme.SectionBoxBackground,
                ZIndex = hub.ScreenGui.DisplayOrder + 50,
                GroupTransparency = 1
            }
        )
        CreateInstance(
            "UICorner",
            {Parent = presetsPopupContainer, CornerRadius = UDim.new(0, hub.Theme.CornerRadius - 2)}
        )
        CreateInstance(
            "UIStroke",
            {
                Parent = presetsPopupContainer,
                Color = hub.Theme.SectionLineColor,
                Thickness = 1,
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            }
        )
        local pF = presetsPopupContainer
        CreateInstance(
            "UIListLayout",
            {
                Parent = pF,
                Padding = UDim.new(0, 8),
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                FillDirection = Enum.FillDirection.Vertical
            }
        )
        CreateInstance(
            "UIPadding",
            {
                Parent = pF,
                PaddingTop = UDim.new(0, 8),
                PaddingBottom = UDim.new(0, 8),
                PaddingLeft = UDim.new(0, 8),
                PaddingRight = UDim.new(0, 8)
            }
        )
        CreateInstance(
            "TextLabel",
            {
                Parent = pF,
                Text = "Presets",
                Font = Enum.Font.SourceSansSemibold,
                TextSize = 14,
                TextColor3 = hub.Theme.LabelText,
                Size = UDim2.new(1, 0, 0, 18),
                TextXAlignment = Enum.TextXAlignment.Left,
                BackgroundTransparency = 1,
                LayoutOrder = 1
            }
        )
        local pCont =
            CreateInstance(
            "Frame",
            {
                Parent = pF,
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1,
                LayoutOrder = 2
            }
        )
        local pContLayout =
            CreateInstance(
            "UIListLayout",
            {
                Parent = pCont,
                FillDirection = Enum.FillDirection.Horizontal,
                VerticalAlignment = Enum.VerticalAlignment.Top,
                HorizontalAlignment = Enum.HorizontalAlignment.Left,
                Padding = UDim.new(0, 6)
            }
        )
        local addPresetBtn =
            CreateInstance(
            "TextButton",
            {
                Parent = pCont,
                Size = UDim2.new(0, controlElementHeight - 4, 0, controlElementHeight - 4),
                Text = "+",
                Font = Enum.Font.SourceSansBold,
                TextSize = 20,
                TextColor3 = hub.Theme.ButtonText,
                BackgroundColor3 = hub.Theme.ButtonBackground,
                LayoutOrder = 1
            }
        )
        CreateInstance("UICorner", {Parent = addPresetBtn, CornerRadius = UDim.new(0, hub.Theme.InputCornerRadius - 1)})
        local presetsScr =
            CreateInstance(
            "ScrollingFrame",
            {
                Parent = pCont,
                Size = UDim2.new(1, -(controlElementHeight - 4 + pContLayout.Padding.Offset), 0, 44),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = hub.Theme.ScrollBarColor,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                LayoutOrder = 2
            }
        )
        local pItemLayout =
            CreateInstance(
            "UIGridLayout",
            {
                Parent = presetsScr,
                CellPadding = UDim2.new(0, 4, 0, 4),
                CellSize = UDim2.new(0, controlElementHeight - 6, 0, controlElementHeight - 6),
                FillDirection = Enum.FillDirection.Horizontal,
                HorizontalAlignment = Enum.HorizontalAlignment.Left,
                VerticalAlignment = Enum.VerticalAlignment.Top
            }
        )
        local pScrPad =
            CreateInstance(
            "UIPadding",
            {Parent = presetsScr, PaddingTop = UDim.new(0, 2), PaddingBottom = UDim.new(0, 2)}
        )

        local function populatePInPopup()
            if not presetsScr or not presetsScr.Parent then
                return
            end
            for _, ch in ipairs(presetsScr:GetChildren()) do
                if ch:IsA("TextButton") and ch.Name:match("^PopupPresetSwatch_") then
                    ch:Destroy()
                end
            end
            for i, pD in ipairs(colorPresets) do
                local pC, pA
                if typeof(pD) == "Color3" then
                    pC, pA = pD, 1
                elseif typeof(pD) == "table" and typeof(pD.Color) == "Color3" then
                    pC, pA = pD.Color, typeof(pD.Alpha) == "number" and pD.Alpha or 1
                else
                    pC, pA = Color3.new(1, 0, 0), 1
                end
                local sw =
                    CreateInstance(
                    "TextButton",
                    {
                        Parent = presetsScr,
                        Name = "PopupPresetSwatch_" .. i,
                        Size = pItemLayout.CellSize,
                        Text = "",
                        BackgroundColor3 = pC,
                        BackgroundTransparency = 1 - pA,
                        BorderSizePixel = 1,
                        BorderColor3 = Color3.fromRGB(70, 70, 70),
                        AutoButtonColor = false,
                        LayoutOrder = i
                    }
                )
                CreateInstance("UICorner", {Parent = sw, CornerRadius = UDim.new(0, 3)})
                CreateInstance(
                    "ImageLabel",
                    {
                        Parent = sw,
                        Size = UDim2.new(1, 0, 1, 0),
                        Image = "rbxassetid://2609200982",
                        ScaleType = Enum.ScaleType.Tile,
                        TileSize = UDim2.new(0, 3, 0, 3),
                        ImageTransparency = 0.7,
                        BackgroundTransparency = 1,
                        ZIndex = sw.ZIndex - 1
                    }
                )
                sw.MouseButton1Click:Connect(
                    function()
                        currentColor, currentAlpha = pC, pA
                        updateMainPreviewAndTextInternal()
                        if callbackFunction then
                            task.spawn(callbackFunction, {Color = currentColor, Alpha = currentAlpha})
                        end
                        closePresetsPopup()
                    end
                )
            end
            task.wait()
            presetsScr.CanvasSize =
                UDim2.new(
                0,
                0,
                0,
                pItemLayout.AbsoluteContentSize.Y + pScrPad.PaddingTop.Offset + pScrPad.PaddingBottom.Offset
            )
            local scrH = math.min(presetsScr.CanvasSize.Y.Offset, 80)
            if scrH < controlElementHeight - 4 then
                scrH = controlElementHeight - 4
            end
            presetsScr.Size = UDim2.new(presetsScr.Size.X.Scale, presetsScr.Size.X.Offset, 0, scrH)
            task.defer(
                function()
                    if presetsPopupContainer and presetsPopupContainer.Parent then
                        presetsPopupContainer.Size =
                            UDim2.new(presetsPopupContainer.Size.X.Scale, presetsPopupContainer.Size.X.Offset, 0, 0)
                    end
                end
            )
        end
        addPresetBtn.MouseButton1Click:Connect(
            function()
                local cAdd, aAdd = parseColorInputText(colorInputTextBox.Text)
                if cAdd then
                    currentColor = cAdd
                    if aAdd ~= nil then
                        currentAlpha = aAdd
                    end
                    updateMainPreviewAndTextInternal()
                    table.insert(colorPresets, {Color = currentColor, Alpha = currentAlpha})
                    populatePInPopup()
                    if callbackFunction then
                        task.spawn(callbackFunction, {Color = currentColor, Alpha = currentAlpha})
                    end
                else
                    if hub.Notification then
                        hub:Notification(
                            {
                                Title = "Invalid Color",
                                Desc = "Could not parse from input.",
                                Type = "Error",
                                Duration = 2
                            }
                        )
                    end
                end
            end
        )
        task.defer(
            function()
                if not presetsPopupContainer then
                    return
                end
                populatePInPopup()
                local rPAS, rPASi = rightPane.AbsolutePosition, rightPane.AbsoluteSize
                local pX, pY = rPAS.X, rPAS.Y + rPASi.Y + 5
                local pASi = presetsPopupContainer.AbsoluteSize
                if pASi.X == 0 or pASi.Y == 0 then
                    task.wait()
                    pASi = presetsPopupContainer.AbsoluteSize
                end
                if pX + pASi.X > hub.ScreenGui.AbsoluteSize.X then
                    pX = hub.ScreenGui.AbsoluteSize.X - pASi.X - 5
                end
                if pY + pASi.Y > hub.ScreenGui.AbsoluteSize.Y then
                    pY = rPAS.Y - pASi.Y - 5
                end
                pX, pY = math.max(5, pX), math.max(5, pY)
                presetsPopupContainer.Position = UDim2.fromOffset(pX, pY + 10)
                TweenService:Create(
                    presetsPopupContainer,
                    TweenInfo.new(0.15),
                    {GroupTransparency = 0, Position = UDim2.fromOffset(pX, pY)}
                ):Play()
                task.wait(0.16)
                popupJustOpened = false
            end
        )
        popupOpenConnection =
            UserInputService.InputBegan:Connect(
            function(iBO)
                if popupJustOpened then
                    return
                end
                if
                    presetsPopupContainer and presetsPopupContainer.Visible and
                        presetsPopupContainer.GroupTransparency < 0.9
                 then
                    if
                        iBO.UserInputType == Enum.UserInputType.MouseButton1 or
                            iBO.UserInputType == Enum.UserInputType.Touch
                     then
                        local mL = UserInputService:GetMouseLocation()
                        local gOAP
                        local sG, rG =
                            pcall(
                            function()
                                gOAP = hub.ScreenGui:GetGuiObjectsAtPosition(mL.X, mL.Y)
                            end
                        )
                        local sC = true
                        if sG and gOAP then
                            for _, gO in ipairs(gOAP) do
                                if
                                    gO:IsDescendantOf(presetsPopupContainer) or gO == presetsPopupContainer or
                                        gO == colorPreviewButton or
                                        gO == colorModeButton or
                                        (isColorModeDropdownOpen and colorModeDropdownFrame and
                                            gO:IsDescendantOf(colorModeDropdownFrame))
                                 then
                                    sC = false
                                    break
                                end
                            end
                        else
                            local pAP, pAS = presetsPopupContainer.AbsolutePosition, presetsPopupContainer.AbsoluteSize
                            if mL.X >= pAP.X and mL.X <= pAP.X + pAS.X and mL.Y >= pAP.Y and mL.Y <= pAP.Y + pAS.Y then
                                sC = false
                            end
                            if isColorModeDropdownOpen and colorModeDropdownFrame and colorModeDropdownFrame.Parent then
                                local cAP, cAS =
                                    colorModeDropdownFrame.AbsolutePosition,
                                    colorModeDropdownFrame.AbsoluteSize
                                if mL.X >= cAP.X and mL.X <= cAP.X + cAS.X and mL.Y >= cAP.Y and mL.Y <= cAP.Y + cAS.Y then
                                    sC = false
                                end
                            end
                        end
                        if sC then
                            if isColorModeDropdownOpen and colorModeDropdownFrame then
                                colorModeDropdownFrame:Destroy()
                                colorModeDropdownFrame = nil
                                isColorModeDropdownOpen = false
                            end
                            closePresetsPopup()
                        end
                    elseif iBO.KeyCode == Enum.KeyCode.Escape then
                        if isColorModeDropdownOpen and colorModeDropdownFrame then
                            colorModeDropdownFrame:Destroy()
                            colorModeDropdownFrame = nil
                            isColorModeDropdownOpen = false
                        end
                        closePresetsPopup()
                    end
                end
            end
        )
    end

    colorPreviewButton.MouseButton1Click:Connect(
        function()
            if not apiRef.IsEnabled then
                return
            end
            if presetsPopupContainer and presetsPopupContainer.Parent then
                closePresetsPopup()
            else
                createPresetsPopup()
            end
        end
    )
    colorInputTextBox.FocusLost:Connect(
        function()
            if not apiRef.IsEnabled then
                updateMainPreviewAndTextInternal()
                return
            end
            local nC, nA = parseColorInputText(colorInputTextBox.Text)
            local chg = false
            if nC and nC ~= currentColor then
                currentColor = nC
                chg = true
            end
            if nA and nA ~= currentAlpha then
                currentAlpha = nA
                chg = true
            end
            updateMainPreviewAndTextInternal()
            if chg and callbackFunction then
                task.spawn(callbackFunction, {Color = currentColor, Alpha = currentAlpha})
            end
        end
    )
    apiRef.IsOpen = function(sA)
        return (presetsPopupContainer and presetsPopupContainer.Visible and presetsPopupContainer.GroupTransparency < 1) or
            (isColorModeDropdownOpen and colorModeDropdownFrame and colorModeDropdownFrame.Visible)
    end
    apiRef.Close = function(sA)
        closePresetsPopup()
        if isColorModeDropdownOpen and colorModeDropdownFrame then
            colorModeDropdownFrame:Destroy()
            colorModeDropdownFrame = nil
            isColorModeDropdownOpen = false
        end
    end
    apiRef.GetColor = function(sA)
        return currentColor, currentAlpha
    end
    apiRef.SetColorAndAlpha = function(sA, c3, a)
        if not sA.IsEnabled then
            return
        end
        local ch, nCo, nAl = false, currentColor, currentAlpha
        if typeof(c3) == "Color3" then
            nCo = c3
        elseif c3 ~= nil then
            return
        end
        if typeof(a) == "number" then
            nAl = math.clamp(a, 0, 1)
        elseif a ~= nil then
            return
        end
        if nCo ~= currentColor or nAl ~= currentAlpha then
            currentColor, currentAlpha, ch = nCo, nAl, true
        end
        if ch then
            updateMainPreviewAndTextInternal()
            if callbackFunction then
                task.spawn(callbackFunction, {Color = currentColor, Alpha = currentAlpha})
            end
        end
    end
    apiRef.SetColor = function(sA, c3)
        if not sA.IsEnabled then
            return
        end
        sA:SetColorAndAlpha(c3, currentAlpha)
    end
    apiRef.SetAlpha = function(sA, a)
        if not sA.IsEnabled then
            return
        end
        sA:SetColorAndAlpha(currentColor, a)
    end
    apiRef.SetEnabled = function(sA, e)
        sA.IsEnabled = e == true
        if leftPane then
            leftPane.GroupTransparency = sA.IsEnabled and 0 or 0.4
        end
        colorPreviewButton.Sensitive = sA.IsEnabled
        colorInputTextBox.Sensitive = sA.IsEnabled
        colorModeButton.Sensitive = sA.IsEnabled
        if not sA.IsEnabled then
            sA:Close()
        end
        actualColorPreview.BackgroundTransparency =
            sA.IsEnabled and (1 - currentAlpha) or ((1 - currentAlpha) * 0.5 + 0.5)
    end
    apiRef.SetVisible = function(sA, v)
        AnimateElementVisibility(controlRow, v == true, 0.2)
        if not v then
            sA:Close()
        end
    end
    apiRef.ConnectEvent = function()
    end
    AddControlToSubTabAndIncrementCounter(self, controlRow, apiRef)
    return apiRef
end

TrxLib.SubTabMethods.AddSection = function(self, sectionTitle)
    local hub = self.Hub
    local sectionContainer =
        CreateInstance(
        "Frame",
        {
            Name = sectionTitle:gsub("%s+", "") .. "SectionContainer",
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        }
    )
    local sectionBox =
        CreateInstance(
        "Frame",
        {
            Name = "SectionBoxFrame",
            Parent = sectionContainer,
            BackgroundColor3 = hub.Theme.SectionBoxBackground,
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y,
            BorderSizePixel = 0,
            ClipsDescendants = true
        }
    )
    CreateInstance("UICorner", {Parent = sectionBox, CornerRadius = UDim.new(0, hub.Theme.SectionCornerRadius)})
    CreateInstance(
        "UIListLayout",
        {
            Parent = sectionBox,
            FillDirection = Enum.FillDirection.Vertical,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 0)
        }
    )
    CreateInstance(
        "UIPadding",
        {
            Parent = sectionBox,
            PaddingTop = UDim.new(0, hub.Theme.Padding / 2),
            PaddingBottom = UDim.new(0, hub.Theme.Padding / 2),
            PaddingLeft = UDim.new(0, hub.Theme.Padding / 1.5),
            PaddingRight = UDim.new(0, hub.Theme.Padding / 1.5)
        }
    )
    local sectionHeaderButton =
        CreateInstance(
        "TextButton",
        {
            Name = sectionTitle .. "HeaderButton",
            Parent = sectionBox,
            Size = UDim2.new(1, 0, 0, hub.Theme.CategoryHeaderHeight),
            BackgroundColor3 = hub.Theme.SectionBoxBackground,
            BackgroundTransparency = 1,
            Text = "",
            AutoButtonColor = false,
            BorderSizePixel = 0,
            LayoutOrder = 1
        }
    )
    CreateInstance(
        "TextLabel",
        {
            Name = "SectionHeaderLabel",
            Parent = sectionHeaderButton,
            Size = UDim2.new(1, -(hub.Theme.Padding + 12 + 5), 1, 0), -- Adjusted for arrow
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Font = Enum.Font.SourceSansSemibold,
            Text = sectionTitle:upper(),
            TextColor3 = hub.Theme.SectionHeaderTextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        }
    )

    -- Create sectionContentFrame and contentListLayout BEFORE sectionContentApi definition
    local sectionContentFrame =
        CreateInstance(
        "Frame",
        {
            Name = sectionTitle:gsub("%s+", "") .. "SectionContent",
            Parent = sectionBox,
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ClipsDescendants = false,
            Visible = true, -- Initial visibility of content frame controlled by IsExpanded
            LayoutOrder = 3
        }
    )
    CreateInstance(
        "UIPadding",
        {
            Parent = sectionContentFrame,
            PaddingTop = UDim.new(0, hub.Theme.ControlSpacing),
            PaddingBottom = UDim.new(0, hub.Theme.ControlSpacing),
            PaddingLeft = UDim.new(0, 0),
            PaddingRight = UDim.new(0, 0)
        }
    )
    local contentListLayout =
        CreateInstance(
        "UIListLayout",
        {
            Parent = sectionContentFrame,
            Padding = UDim.new(0, hub.Theme.ControlSpacing),
            SortOrder = Enum.SortOrder.LayoutOrder,
            FillDirection = Enum.FillDirection.Vertical
        }
    )

    -- Define sectionContentApi with IsExpanded FIRST
    local sectionContentApi = {
        Hub = hub,
        ContentFrame = sectionContentFrame,
        ListLayout = contentListLayout,
        Controls = {},
        ControlsCount = 0,
        Name = sectionTitle .. "_SectionContentAPI",
        IsExpanded = true, -- Default to expanded
        _ApplyThemeRecursive = function(selfApi, themeToApply)
            for _, ctrlAPI in ipairs(selfApi.Controls) do
                if ctrlAPI and ctrlAPI._ApplyThemeRecursive then
                    pcall(
                        function()
                            ctrlAPI:_ApplyThemeRecursive(themeToApply)
                        end
                    )
                end
            end
        end
    }
    -- Assign methods and metatable AFTER basic structure is defined
    for methodName, func in pairs(TrxLib.SubTabMethods) do
        if methodName:match("^Add") then
            sectionContentApi[methodName] = func
        end
    end
    setmetatable(sectionContentApi, {__index = TrxLib.SubTabMethods})

    local sectionArrow =
        CreateInstance(
        "ImageLabel",
        {
            Name = "SectionArrow",
            Parent = sectionHeaderButton,
            Size = UDim2.new(0, 12, 0, 12),
            Position = UDim2.new(1, -12, 0.5, -6),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Image = ARROW_ASSET_ID_OPEN,
            ImageColor3 = hub.Theme.CategoryArrowColor,
            Rotation = sectionContentApi.IsExpanded and 0 or -90
        }
    )

    sectionContentFrame.Visible = sectionContentApi.IsExpanded

    CreateInstance(
        "Frame",
        {
            Name = "SectionDividerLine",
            Parent = sectionBox,
            BackgroundColor3 = hub.Theme.SectionLineColor,
            BackgroundTransparency = sectionContentApi.IsExpanded and 0 or 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 1),
            LayoutOrder = 2
        }
    )

    sectionHeaderButton.MouseButton1Click:Connect(
        function()
            sectionContentApi.IsExpanded = not sectionContentApi.IsExpanded
            sectionArrow.Rotation = sectionContentApi.IsExpanded and 0 or -90
            local divider = sectionBox:FindFirstChild("SectionDividerLine")

            local targetVisibility = sectionContentApi.IsExpanded
            local animationDuration = 0.2

            if divider then
                AnimateElementVisibility(divider, targetVisibility, animationDuration / 2)
            end

            for _, controlApiChild in ipairs(sectionContentApi.Controls) do
                if controlApiChild.Gui then
                    AnimateElementVisibility(controlApiChild.Gui, targetVisibility, animationDuration)
                end
            end

            if targetVisibility then
                sectionContentFrame.Visible = true
            end
            AnimateElementVisibility(
                sectionContentFrame,
                targetVisibility,
                animationDuration,
                function()
                    if not targetVisibility then
                        sectionContentFrame.Visible = false
                    end
                end
            )
        end
    )

    local sectionContainerApi = {
        Gui = sectionContainer,
        Type = "SectionContainer",
        Content = sectionContentApi,
        _ApplyThemeRecursive = function(selfContainerApi, themeToApply)
            if not sectionContainer or not sectionContainer.Parent then
                return
            end
            pcall(
                function()
                    sectionBox.BackgroundColor3 = themeToApply.SectionBoxBackground
                    sectionBox.BorderSizePixel = 0
                end
            )
            local boxCorner = sectionBox:FindFirstChildOfClass("UICorner")
            if boxCorner then
                pcall(
                    function()
                        boxCorner.CornerRadius = UDim.new(0, themeToApply.SectionCornerRadius)
                    end
                )
            end
            pcall(
                function()
                    sectionHeaderButton.BackgroundColor3 = themeToApply.SectionBoxBackground
                    sectionHeaderButton.BorderSizePixel = 0
                end
            )
            pcall(
                function()
                    local headerLabel = sectionHeaderButton:FindFirstChild("SectionHeaderLabel")
                    if headerLabel then
                        headerLabel.TextColor3 = themeToApply.SectionHeaderTextColor
                    end
                end
            )
            pcall(
                function()
                    if sectionArrow then
                        sectionArrow.ImageColor3 = themeToApply.CategoryArrowColor
                    end
                end
            )
            local divLine = sectionBox:FindFirstChild("SectionDividerLine")
            if divLine then
                pcall(
                    function()
                        divLine.BackgroundColor3 = themeToApply.SectionLineColor
                        divLine.BackgroundTransparency =
                            (selfContainerApi.Content and selfContainerApi.Content.IsExpanded) and 0 or 1
                        divLine.BorderSizePixel = 0
                    end
                )
            end
            if selfContainerApi.Content and selfContainerApi.Content._ApplyThemeRecursive then
                selfContainerApi.Content:_ApplyThemeRecursive(themeToApply)
            end
        end
    }

    AddControlToSubTabAndIncrementCounter(self, sectionContainer, sectionContainerApi)
    return sectionContentApi
end

TrxLib.SubTabMethods.AddTooltip = function(selfCtrlApi, tooltipText)
    local hub = selfCtrlApi.Hub
    if not hub then
        hub =
            selfCtrlApi.Gui and
            (selfCtrlApi.Gui.HubInstance or (selfCtrlApi.Gui.Parent and selfCtrlApi.Gui.Parent.HubInstance))
        if not hub then
            warn("TrxLib.AddTooltip: Hub instance could not be found for tooltip.")
            return selfCtrlApi
        end
    end

    local TOOLTIP_TEXT_LABEL_CHILD_NAME = "TrxLib_TooltipTextLabel"

    if not hub.GlobalTooltipFrame then
        hub.GlobalTooltipFrame =
            CreateInstance(
            "Frame",
            {
                Name = "TooltipFrame",
                Parent = hub.ScreenGui,
                BackgroundTransparency = hub.Theme.TooltipBackgroundTransparency or 0.05,
                BackgroundColor3 = hub.Theme.TooltipBackground,
                BorderSizePixel = 0,
                Visible = false,
                ZIndex = 99999,
                AutomaticSize = Enum.AutomaticSize.XY,
                ClipsDescendants = true
            }
        )
        CreateInstance(
            "UICorner",
            {Parent = hub.GlobalTooltipFrame, CornerRadius = UDim.new(0, math.max(0, hub.Theme.CornerRadius - 2))}
        )
        CreateInstance(
            "UIPadding",
            {
                Parent = hub.GlobalTooltipFrame,
                PaddingLeft = UDim.new(0, 8),
                PaddingRight = UDim.new(0, 8),
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5)
            }
        )
        CreateInstance(
            "TextLabel",
            {
                Name = TOOLTIP_TEXT_LABEL_CHILD_NAME,
                Parent = hub.GlobalTooltipFrame,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = Enum.Font.SourceSans,
                TextSize = 12,
                TextColor3 = hub.Theme.TooltipText,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center,
                AutomaticSize = Enum.AutomaticSize.XY,
                LineHeight = 1.1
            }
        )
    end

    local tooltipFrame = hub.GlobalTooltipFrame
    local mainGui = selfCtrlApi.Gui
    local enterConn, leaveConn, moveConn

    enterConn =
        mainGui.MouseEnter:Connect(
        function()
            if not mainGui or not mainGui.Parent or not tooltipFrame or not tooltipFrame.Parent then
                if enterConn then
                    enterConn:Disconnect()
                end
                if leaveConn then
                    leaveConn:Disconnect()
                end
                if moveConn then
                    moveConn:Disconnect()
                end
                return
            end
            local actualTextLabel = tooltipFrame:FindFirstChild(TOOLTIP_TEXT_LABEL_CHILD_NAME)
            if not actualTextLabel then
                if tooltipFrame.Visible then
                    tooltipFrame.Visible = false
                end
                return
            end
            actualTextLabel.Text = tooltipText
            tooltipFrame.Visible = true
            local mousePos = UserInputService:GetMouseLocation()
            tooltipFrame.Position = UDim2.fromOffset(mousePos.X + 15, mousePos.Y + 15)
            task.wait()
            if not tooltipFrame.Parent then
                return
            end
            local bounds = tooltipFrame.AbsoluteSize
            local screen = hub.ScreenGui.AbsoluteSize
            local newX, newY = mousePos.X + 15, mousePos.Y + 15
            if newX + bounds.X > screen.X then
                newX = mousePos.X - 15 - bounds.X
            end
            if newY + bounds.Y > screen.Y then
                newY = mousePos.Y - 15 - bounds.Y
            end
            newX = math.max(0, newX)
            newY = math.max(0, newY)
            tooltipFrame.Position = UDim2.fromOffset(newX, newY)
            if not (moveConn and moveConn.Connected) then
                moveConn =
                    UserInputService.InputChanged:Connect(
                    function(input)
                        if
                            input.UserInputType == Enum.UserInputType.MouseMovement and tooltipFrame.Visible and
                                tooltipFrame.Parent
                         then
                            local currentMousePos = UserInputService:GetMouseLocation()
                            task.wait()
                            if not tooltipFrame.Parent then
                                return
                            end
                            local currentBounds = tooltipFrame.AbsoluteSize
                            local currentScreen = hub.ScreenGui.AbsoluteSize
                            local newPosX, newPosY = currentMousePos.X + 15, currentMousePos.Y + 15
                            if newPosX + currentBounds.X > currentScreen.X then
                                newPosX = currentMousePos.X - 15 - currentBounds.X
                            end
                            if newPosY + currentBounds.Y > currentScreen.Y then
                                newPosY = currentMousePos.Y - 15 - currentBounds.Y
                            end
                            newPosX = math.max(0, newPosX)
                            newPosY = math.max(0, newPosY)
                            tooltipFrame.Position = UDim2.fromOffset(newPosX, newPosY)
                        end
                    end
                )
            end
        end
    )
    leaveConn =
        mainGui.MouseLeave:Connect(
        function()
            if tooltipFrame then
                tooltipFrame.Visible = false
            end
            if moveConn and moveConn.Connected then
                moveConn:Disconnect()
            end
        end
    )
    if mainGui:IsA("GuiObject") then
        mainGui.AncestryChanged:Connect(
            function(_, parent)
                if not parent then
                    if enterConn then
                        enterConn:Disconnect()
                    end
                    if leaveConn then
                        leaveConn:Disconnect()
                    end
                    if moveConn then
                        moveConn:Disconnect()
                    end
                    if tooltipFrame and tooltipFrame.Visible then
                        tooltipFrame.Visible = false
                    end
                end
            end
        )
    end
    return selfCtrlApi
end

TrxLib.CategoryMethods.CreateSubTab = function(selfCategory, subTabName)
    local hub = selfCategory.Hub
    local subTab = {
        Name = subTabName,
        Category = selfCategory,
        Hub = hub,
        Controls = {},
        ControlsCount = 0,
        Button = nil,
        ActiveIndicator = nil,
        ContentFrame = nil
    }
    subTab.Button =
        CreateInstance(
        "TextButton",
        {
            Name = subTabName .. "SubTabButton",
            Parent = selfCategory.SubTabsFrame,
            Size = UDim2.new(1, 0, 0, hub.Theme.SubTabHeight),
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundColor3 = hub.Theme.SubTabBackground,
            Text = "",
            AutoButtonColor = false,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = subTab.Button, CornerRadius = UDim.new(0, hub.Theme.SubTabCornerRadius)})
    CreateInstance(
        "TextLabel",
        {
            Name = "SubTabNameLabel",
            Parent = subTab.Button,
            Size = UDim2.new(1, -(hub.Theme.Padding + hub.Theme.SubTabIndicatorWidth), 1, 0),
            Position = UDim2.new(0, hub.Theme.Padding * 0.75 + hub.Theme.SubTabIndicatorWidth, 0, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Font = Enum.Font.SourceSans,
            Text = subTabName,
            TextColor3 = hub.Theme.SubTabText,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left
        }
    )
    subTab.ActiveIndicator =
        CreateInstance(
        "Frame",
        {
            Name = "ActiveIndicator",
            Parent = subTab.Button,
            Size = UDim2.new(0, hub.Theme.SubTabIndicatorWidth, 0.7, 0),
            Position = UDim2.new(0, hub.Theme.Padding / 3, 0.15, 0),
            BackgroundColor3 = hub.Theme.SubTabActiveIndicatorColor,
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        }
    )
    CreateInstance("UICorner", {Parent = subTab.ActiveIndicator, CornerRadius = UDim.new(1, 0)})
    subTab.Button.MouseEnter:Connect(
        function()
            if hub.ActiveSubTab ~= subTab then
                subTab.Button.BackgroundColor3 = hub.Theme.SubTabHoverBackground
            end
        end
    )
    subTab.Button.MouseLeave:Connect(
        function()
            if hub.ActiveSubTab ~= subTab then
                subTab.Button.BackgroundColor3 = hub.Theme.SubTabBackground
            end
        end
    )
    subTab.ContentFrame =
        CreateInstance(
        "ScrollingFrame",
        {
            Name = subTabName .. "Content",
            Parent = hub.ContentArea,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundColor3 = hub.Theme.ContentBackground,
            BackgroundTransparency = (hub.Theme.ContentBackground == hub.Theme.WindowBackground) and 1 or
                hub.Theme.ContentTransparency or
                0,
            BorderSizePixel = 0,
            Visible = false,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 6,
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        }
    )
    subTab.ListLayout =
        CreateInstance(
        "UIListLayout",
        {
            Parent = subTab.ContentFrame,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, hub.Theme.ControlSpacing)
        }
    )
    CreateInstance(
        "UIPadding",
        {
            Parent = subTab.ContentFrame,
            PaddingTop = UDim.new(0, hub.Theme.Padding),
            PaddingBottom = UDim.new(0, hub.Theme.Padding),
            PaddingLeft = UDim.new(0, hub.Theme.Padding),
            PaddingRight = UDim.new(0, hub.Theme.Padding)
        }
    )
    subTab.Button.MouseButton1Click:Connect(
        function()
            if hub and hub.SelectSubTab then
                hub:SelectSubTab(subTab)
            end
        end
    )
    table.insert(selfCategory.SubTabs, subTab)
    if hub and hub.SelectSubTab and not hub.ActiveSubTab and #hub.Categories == 1 and #selfCategory.SubTabs == 1 then
        hub:SelectSubTab(subTab)
    end
    for methodName, func in pairs(TrxLib.SubTabMethods) do
        subTab[methodName] = func
    end
    setmetatable(subTab, {__index = TrxLib.SubTabMethods})
    subTab.HubInstance = hub
    return subTab
end

AddControlToSubTabAndIncrementCounter = function(subTabInstance, controlGuiElement, apiObject)
    local contextName = "UnknownContext"
    if subTabInstance and subTabInstance.Name then
        contextName = "SubTab: " .. subTabInstance.Name
    elseif subTabInstance and subTabInstance.ContentFrame and subTabInstance.ContentFrame.Name:match("SectionContent") then
        contextName = "SectionContent in: " .. subTabInstance.ContentFrame.Parent.Parent.Name
    end

    if not subTabInstance.ContentFrame then
        warn(
            "TrxLib:AddControl - subTabInstance.ContentFrame is NIL! Cannot parent element for context: " .. contextName
        )
        return
    end

    subTabInstance.ControlsCount = subTabInstance.ControlsCount + 1
    controlGuiElement.LayoutOrder = subTabInstance.ControlsCount
    controlGuiElement.Parent = subTabInstance.ContentFrame

    local hub = subTabInstance.Hub
    apiObject = apiObject or {}
    apiObject.Gui = controlGuiElement
    apiObject.Hub = hub

    setmetatable(apiObject, {__index = TrxLib.SubTabMethods})

    apiObject._ApplyThemeRecursive = function(selfCtrlApi, currentTheme)
        local function applyToObject(obj, theme)
            if not obj or not obj.Parent then
                return
            end
            pcall(
                function()
                    if obj:IsA("GuiObject") then
                        obj.BorderSizePixel = 0
                    end
                    if obj:IsA("UICorner") then
                        local p = obj.Parent
                        if p.Name == "SectionBoxFrame" then
                            obj.CornerRadius = UDim.new(0, theme.SectionCornerRadius)
                        elseif
                            p.Name == "InputTextBox" or p.Name == "SliderValueInput" or
                                p.Name == "RangeSliderValueInput" or
                                p.Name == "ColorPickerInputTextBox" or
                                p.Name == "CheckboxButtonArea"
                         then
                            obj.CornerRadius = UDim.new(0, theme.InputCornerRadius)
                        elseif p.Name == "CheckMarkVisualFill" then
                            obj.CornerRadius = UDim.new(0, math.max(1, theme.InputCornerRadius - 2))
                        elseif
                            p.Name:match("Button") or p.Name == "Thumb" or p.Name == "MinThumb" or p.Name == "MaxThumb"
                         then
                            obj.CornerRadius = UDim.new(0, theme.ButtonCornerRadius)
                        elseif
                            p.Name:match("DropdownList") or p.Name:match("ItemButton") or
                                p.Name == "ColorPickerModeList"
                         then
                            obj.CornerRadius = UDim.new(0, theme.DropdownItemCornerRadius)
                        elseif p.Name:match("SubTabButton") then
                            obj.CornerRadius = UDim.new(0, theme.SubTabCornerRadius)
                        elseif p.Name == "ScriptNamePillFrame" then
                            obj.CornerRadius = UDim.new(0, theme.ScriptNamePillVCorners)
                        elseif
                            p.Name == "ActiveIndicator" or p.Name == "Track" or p.Name == "SliderProgressFill" or
                                p.Name == "RangeSliderProgressFill"
                         then
                            obj.CornerRadius = UDim.new(1, 0)
                        elseif
                            p == hub.MainWindow or p == hub.UserIcon or p == hub.MiniLogoButton or
                                p.Name == "TooltipFrame"
                         then
                            obj.CornerRadius = UDim.new(0, theme.CornerRadius)
                        end
                    elseif obj:IsA("TextLabel") then
                        if obj.Name == "ControlLabel" then
                            obj.TextColor3 = theme.LabelText
                        elseif obj.Name == "ControlDescription" then
                            obj.TextColor3 = theme.DescriptionText
                            obj.TextSize = 11
                        elseif obj.Name == "InputLabel" then
                            obj.TextColor3 = theme.LabelText
                        elseif
                            obj.Name == "SliderNameLabel" or obj.Name == "SliderValueLabel" or
                                obj.Name == "RangeSliderNameLabel" or
                                obj.Name == "RangeSliderValueLabel"
                         then
                            obj.TextColor3 = theme.LabelText
                        elseif obj.Name == "DropdownLabel" then
                            obj.TextColor3 = theme.LabelText
                        elseif obj.Name == "KeybindLabel" then
                            obj.TextColor3 = theme.LabelText
                        elseif obj.Name == "ColorPickerMainLabel" then
                            obj.TextColor3 = theme.LabelText
                        elseif obj.Name == "ColorPickerErrorLabel" then
                            obj.TextColor3 = theme.ErrorTextColor
                        elseif obj.Name == "SectionHeaderLabel" then
                            obj.TextColor3 = theme.SectionHeaderTextColor
                        elseif obj.Name == "TooltipTextLabel" then
                            obj.TextColor3 = theme.TooltipText
                        elseif
                            not (obj.Name:match("ItemLabel$") or obj.Name:match("NameLabel$") or
                                obj.Name:match("TagLabel$") or
                                obj.Name:match("PillText$") or
                                obj.Name:match("VersionLabel$") or
                                obj.Name == "CategoryNameLabel" or
                                obj.Name == "SubTabNameLabel")
                         then
                            obj.TextColor3 = theme.LabelText
                        end
                    elseif obj:IsA("TextButton") then
                        if obj.Name == "ActionButton" then
                            obj.BackgroundColor3 = theme.ButtonBackground
                            obj.TextColor3 = theme.ButtonText
                        elseif obj.Name == "CheckboxButtonArea" then
                            obj.BackgroundColor3 = theme.ToggleCheckboxBackground
                        elseif obj.Name == "KeyButton" then
                            obj.BackgroundColor3 = theme.ButtonBackground
                            obj.TextColor3 = theme.ButtonText
                        elseif obj.Name:match("^MainButton_") or obj.Name == "ColorPickerModeButton" then
                            obj.BackgroundColor3 = theme.DropdownButton
                            obj.TextColor3 = theme.ButtonText
                        elseif obj.Name:match("ItemButton") then
                            obj.BackgroundColor3 = theme.DropdownBackground
                            local il = obj:FindFirstChild("ItemLabel")
                            if il then
                                il.TextColor3 = theme.ButtonText
                            end
                        end
                    elseif obj:IsA("TextBox") then
                        obj.BackgroundColor3 = theme.InputBackground
                        obj.TextColor3 = theme.InputText
                        obj.PlaceholderColor3 = theme.InputPlaceholder
                        obj.BorderSizePixel = 0
                        if obj.Name == "SliderValueInput" or obj.Name == "RangeSliderValueInput" then
                            obj.BackgroundColor3 = theme.SliderInputBackground
                        end
                    elseif obj:IsA("Frame") then
                        if obj.Name == "CheckMarkVisualFill" then
                            obj.BackgroundColor3 = theme.ToggleCheckboxFilledColor
                        elseif obj.Name == "Track" then
                            obj.BackgroundColor3 = theme.SliderTrack
                        elseif obj.Name == "SliderProgressFill" or obj.Name == "RangeSliderProgressFill" then
                            obj.BackgroundColor3 = theme.SliderProgress
                        elseif obj.Name == "SeparatorLine" or obj.Name == "SectionDividerLine" then
                            obj.BackgroundColor3 = theme.SeparatorLineColor
                            obj.BackgroundTransparency = 0 -- Make visible during theme apply
                        elseif obj.Name == "SectionBoxFrame" then
                            obj.BackgroundColor3 = theme.SectionBoxBackground
                        elseif obj.Name == "ColorPreviewDisplay" then
                            local s = obj:FindFirstChildOfClass("UIStroke")
                            if s then
                                s.Enabled = false
                            end
                        elseif obj.Name == "DropdownList" or obj.Name == "ColorPickerModeList" then
                            obj.BackgroundColor3 = theme.DropdownBackground
                        elseif obj.Name == "TooltipFrame" then
                            pcall(
                                function()
                                    obj.BackgroundColor3 = theme.TooltipBackground
                                    obj.BackgroundTransparency = theme.TooltipBackgroundTransparency or 0.05
                                    local border = obj:FindFirstChildOfClass("UIStroke")
                                    if border then
                                        border.Enabled = false
                                    end
                                end
                            )
                        end
                    elseif
                        obj:IsA("ImageLabel") and
                            (obj.Name == "Thumb" or obj.Name == "MinThumb" or obj.Name == "MaxThumb")
                     then
                        obj.BackgroundColor3 = theme.SliderThumb
                    elseif obj:IsA("UIStroke") then
                        if
                            obj.Parent and
                                (obj.Parent.Name == "CheckboxButtonArea" or obj.Parent.Name == "ColorPreviewDisplay")
                         then
                            obj.Enabled = false
                        end
                    end
                end
            )
            for _, child in ipairs(obj:GetChildren()) do
                if child:IsA("GuiObject") or child:IsA("UIStroke") then
                    applyToObject(child, theme)
                end
            end
        end
        applyToObject(selfCtrlApi.Gui, currentTheme)
    end
    table.insert(subTabInstance.Controls, apiObject)

    local originalBgTrans = nil
    if
        controlGuiElement:IsA("Frame") or controlGuiElement:IsA("TextButton") or controlGuiElement:IsA("TextBox") or
            controlGuiElement:IsA("ImageLabel") or
            controlGuiElement:IsA("ImageButton")
     then
        originalBgTrans = controlGuiElement.BackgroundTransparency
        controlGuiElement:SetAttribute("OriginalBackgroundTransparency", originalBgTrans)
    end
    if controlGuiElement:IsA("TextLabel") or controlGuiElement:IsA("TextButton") or controlGuiElement:IsA("TextBox") then
        controlGuiElement:SetAttribute("OriginalTextTransparency", controlGuiElement.TextTransparency)
    end
    if controlGuiElement:IsA("ImageLabel") or controlGuiElement:IsA("ImageButton") then
        controlGuiElement:SetAttribute("OriginalImageTransparency", controlGuiElement.ImageTransparency)
    end

    local isParentActive = false
    if hub.ActiveSubTab then
        if subTabInstance.ContentFrame == hub.ActiveSubTab.ContentFrame then
            isParentActive = true
        elseif
            controlGuiElement.Parent and controlGuiElement.Parent.Parent and controlGuiElement.Parent.Parent.Parent and
                controlGuiElement.Parent.Parent.Parent.Parent == hub.ActiveSubTab.ContentFrame
         then
            local sectionContainer = controlGuiElement.Parent.Parent.Parent
            local sectionApi = nil
            for _, ctrl in ipairs(hub.ActiveSubTab.Controls) do
                if ctrl.Gui == sectionContainer and ctrl.Type == "SectionContainer" then
                    sectionApi = ctrl.Content
                    break
                end
            end
            if sectionApi and sectionApi.IsExpanded then
                isParentActive = true
            end
        end
    end

    if not hub.IsLoading and isParentActive then
        AnimateElementVisibility(controlGuiElement, true, 0.25)
    else
        if originalBgTrans ~= nil then
            controlGuiElement.BackgroundTransparency = 1
        end
        if controlGuiElement:IsA("TextLabel") or controlGuiElement:IsA("TextButton") or controlGuiElement:IsA("TextBox") then
            controlGuiElement.TextTransparency = 1
        end
        if controlGuiElement:IsA("ImageLabel") or controlGuiElement:IsA("ImageButton") then
            controlGuiElement.ImageTransparency = 1
        end
        controlGuiElement.Visible = false
    end
end

function TrxLib:Notification(data)
    local TweenService = game:GetService("TweenService")
    local HttpSrvc = game:GetService("HttpService")

    if not self.ScreenGui or not self.ScreenGui:IsA("ScreenGui") then
        warn("TrxLib:Notification - self.ScreenGui is not a valid ScreenGui.")
        return
    end
    if self.ScreenGui.AbsoluteSize.X == 0 or self.ScreenGui.AbsoluteSize.Y == 0 then
        warn("TrxLib:Notification - self.ScreenGui.AbsoluteSize is zero. Deferring.")
        task.delay(
            0.5,
            function()
                self:Notification(data)
            end
        )
        return
    end

    data = data or {}
    data.Title = data.Title or "Notification"
    data.Desc = data.Desc
    data.Duration = tonumber(data.Duration) or 3
    data.Type = string.lower(tostring(data.Type or "default"))

    if not self.ActiveNotifications then
        self.ActiveNotifications = {}
    end

    local theme = self.Theme
    local function getColor(key, defaultColor)
        return (theme and theme[key] and typeof(theme[key]) == "Color3" and theme[key]) or defaultColor
    end
    local function getNumber(key, defaultNumber)
        return (theme and theme[key] and type(theme[key]) == "number" and theme[key]) or defaultNumber
    end

    local bgColor, textColor, iconUnicode
    local backgroundTransparency = getNumber("NotificationBackgroundTransparency", 0.15)

    if data.Type == "success" then
        bgColor = getColor("NotificationSuccessBackground", Color3.fromRGB(70, 180, 100))
        textColor = getColor("NotificationSuccessText", Color3.fromRGB(255, 255, 255))
        iconUnicode = "✔ "
    elseif data.Type == "error" then
        bgColor = getColor("NotificationErrorBackground", Color3.fromRGB(220, 70, 70))
        textColor = getColor("NotificationErrorText", Color3.fromRGB(255, 255, 255))
        iconUnicode = "✖ "
    elseif data.Type == "warning" then
        bgColor = getColor("NotificationWarningBackground", Color3.fromRGB(230, 180, 80))
        textColor = getColor("NotificationWarningText", Color3.fromRGB(40, 30, 10))
        iconUnicode = "⚠ "
    elseif data.Type == "info" then
        bgColor = getColor("NotificationInfoBackground", Color3.fromRGB(80, 150, 220))
        textColor = getColor("NotificationInfoText", Color3.fromRGB(255, 255, 255))
        iconUnicode = "ℹ "
    else
        bgColor = getColor("NotificationDefaultBackground", Color3.fromRGB(60, 60, 70))
        textColor = getColor("NotificationDefaultText", Color3.fromRGB(230, 230, 230))
        iconUnicode = ""
    end

    local notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "NotificationFrame_" .. data.Type .. "_" .. string.sub(HttpSrvc:GenerateGUID(false), 1, 8)
    notificationFrame.Size = UDim2.new(0, 280, 0, 0)
    notificationFrame.AutomaticSize = Enum.AutomaticSize.Y
    notificationFrame.Position = UDim2.new(1, 15, 0, 15)
    notificationFrame.BackgroundTransparency = 1
    notificationFrame.BackgroundColor3 = bgColor
    notificationFrame.ZIndex = (self.HighestZIndex or 20000) + #self.ActiveNotifications + 1
    notificationFrame.ClipsDescendants = true

    Instance.new("UICorner", notificationFrame).CornerRadius = UDim.new(0, 6)
    local padding = Instance.new("UIPadding", notificationFrame)
    padding.PaddingTop = UDim.new(0, 8)
    padding.PaddingBottom = UDim.new(0, 8)
    padding.PaddingLeft = UDim.new(0, 10)
    padding.PaddingRight = UDim.new(0, 10)
    local listLayout = Instance.new("UIListLayout", notificationFrame)
    listLayout.Padding = UDim.new(0, 4)
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.FillDirection = Enum.FillDirection.Vertical

    local titleText = (iconUnicode or "") .. data.Title
    local titleLabel = Instance.new("TextLabel", notificationFrame)
    titleLabel.Name = "NotificationTitle"
    titleLabel.Text = titleText
    titleLabel.TextColor3 = textColor
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 15
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextWrapped = true
    titleLabel.BackgroundTransparency = 1
    titleLabel.Size = UDim2.new(1, 0, 0, 0)
    titleLabel.AutomaticSize = Enum.AutomaticSize.Y
    titleLabel.LayoutOrder = 1
    titleLabel.TextTransparency = 1

    local descLabel
    if data.Desc and data.Desc ~= "" then
        descLabel = Instance.new("TextLabel", notificationFrame)
        descLabel.Name = "NotificationDescription"
        descLabel.Text = data.Desc
        descLabel.TextColor3 = textColor
        descLabel.Font = Enum.Font.SourceSans
        descLabel.TextSize = 13
        descLabel.TextXAlignment = Enum.TextXAlignment.Left
        descLabel.TextWrapped = true
        descLabel.BackgroundTransparency = 1
        descLabel.Size = UDim2.new(1, 0, 0, 0)
        descLabel.AutomaticSize = Enum.AutomaticSize.Y
        descLabel.LayoutOrder = 2
        descLabel.LineHeight = 1.1
        descLabel.TextTransparency = 1
    end

    notificationFrame.Parent = self.ScreenGui

    task.wait()

    table.insert(self.ActiveNotifications, 1, notificationFrame)

    local currentYOffset = 15
    for i = 1, #self.ActiveNotifications do
        local notif = self.ActiveNotifications[i]
        if notif and notif.Parent then
            local targetX_Scale
            if self.ScreenGui.AbsoluteSize.X > 0 then
                targetX_Scale =
                    1 - (notif.AbsoluteSize.X / self.ScreenGui.AbsoluteSize.X) - (15 / self.ScreenGui.AbsoluteSize.X)
            else
                targetX_Scale = 0.5 - (notif.AbsoluteSize.X / 2 / 280)
            end

            local targetPosition = UDim2.new(targetX_Scale, 0, 0, currentYOffset)

            if notif == notificationFrame then
                notif.Position = UDim2.new(1, 15, 0, currentYOffset)
                local tweenInfoAppear = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                TweenService:Create(
                    notif,
                    tweenInfoAppear,
                    {Position = targetPosition, BackgroundTransparency = backgroundTransparency}
                ):Play()
                TweenService:Create(titleLabel, tweenInfoAppear, {TextTransparency = 0}):Play()
                if descLabel then
                    TweenService:Create(descLabel, tweenInfoAppear, {TextTransparency = 0}):Play()
                end
            else
                local tweenInfoMove = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                TweenService:Create(notif, tweenInfoMove, {Position = targetPosition}):Play()
            end
            currentYOffset = currentYOffset + notif.AbsoluteSize.Y + 8
        else
            table.remove(self.ActiveNotifications, i)
            i = i - 1
        end
    end

    local function destroyAndReposition(notifToDestroy)
        if not notifToDestroy or not notifToDestroy.Parent then
            return
        end

        local foundIndex = -1
        for i = 1, #self.ActiveNotifications do
            if self.ActiveNotifications[i] == notifToDestroy then
                foundIndex = i
                break
            end
        end

        if foundIndex ~= -1 then
            table.remove(self.ActiveNotifications, foundIndex)
        end

        notifToDestroy:Destroy()

        local yPos = 15
        for i = 1, #self.ActiveNotifications do
            local nf = self.ActiveNotifications[i]
            if nf and nf.Parent then
                local targetX_Scale_ReAdjust
                if self.ScreenGui.AbsoluteSize.X > 0 then
                    targetX_Scale_ReAdjust =
                        1 - (nf.AbsoluteSize.X / self.ScreenGui.AbsoluteSize.X) - (15 / self.ScreenGui.AbsoluteSize.X)
                else
                    targetX_Scale_ReAdjust = 0.5 - (nf.AbsoluteSize.X / 2 / 280)
                end
                local tweenInfoReAdjust = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                TweenService:Create(nf, tweenInfoReAdjust, {Position = UDim2.new(targetX_Scale_ReAdjust, 0, 0, yPos)}):Play(

                )
                yPos = yPos + nf.AbsoluteSize.Y + 8
            else
                table.remove(self.ActiveNotifications, i)
                i = i - 1
            end
        end
    end

    local dismissThread
    dismissThread =
        task.delay(
        data.Duration,
        function()
            if notificationFrame and notificationFrame.Parent then
                local tweenInfoDisappear = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
                local disappearPos = UDim2.new(1, 15, notificationFrame.Position.Y.Offset, 0)

                local mainTween =
                    TweenService:Create(
                    notificationFrame,
                    tweenInfoDisappear,
                    {Position = disappearPos, BackgroundTransparency = 1}
                )
                if titleLabel and titleLabel.Parent then
                    TweenService:Create(titleLabel, tweenInfoDisappear, {TextTransparency = 1}):Play()
                end
                if descLabel and descLabel.Parent then
                    TweenService:Create(descLabel, tweenInfoDisappear, {TextTransparency = 1}):Play()
                end

                mainTween.Completed:Connect(
                    function()
                        destroyAndReposition(notificationFrame)
                    end
                )
                mainTween:Play()
            end
        end
    )

    notificationFrame.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if dismissThread then
                    task.cancel(dismissThread)
                    dismissThread = nil
                end

                if notificationFrame and notificationFrame.Parent then
                    local tweenInfoDisappear = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
                    local disappearPos = UDim2.new(1, 15, notificationFrame.Position.Y.Offset, 0)

                    local mainClickTween =
                        TweenService:Create(
                        notificationFrame,
                        tweenInfoDisappear,
                        {Position = disappearPos, BackgroundTransparency = 1}
                    )
                    if titleLabel and titleLabel.Parent then
                        TweenService:Create(titleLabel, tweenInfoDisappear, {TextTransparency = 1}):Play()
                    end
                    if descLabel and descLabel.Parent then
                        TweenService:Create(descLabel, tweenInfoDisappear, {TextTransparency = 1}):Play()
                    end
                    mainClickTween.Completed:Connect(
                        function()
                            destroyAndReposition(notificationFrame)
                        end
                    )
                    mainClickTween:Play()
                end
            end
        end
    )
end

return TrxLib
